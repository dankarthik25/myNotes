


* History of DevOps

Before DevOps, We had two approaches for software development namely the Waterfall and the Agile.
** Waterfall Model
*** Top-down approch
**** Introduction
https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2019/06/Waterfall-Phases-403x300.png
The waterfall model is a software development model that is pretty straight forward and linear. This model follows a top-down approach.
**** > Requirement Gathering and Analysis[Client + Developers]
This model starting with *Requirements gathering and analysis*. In this phase we  get the requirements from the client for developing an application. After this, you try to analyze these requirements.And make a blueprint of software
**** > Design[Developers +..  ]
The next phase is the Design phase where you prepare a blueprint of the software. Here, you think about how the software is actually going to look like.

**** > Implementation[Developers]
Once the design is ready, you move further to Implementation phase where you begin with the coding for the application. The team of developers works together on various components of the application.
**** > Testing[Testers]
Once you complete the application development, you test it in the *Verification phase*. There are various tests conducted on the application such as unit testing, integration testing, performance testing, etc.
**** > Depolyment [Developers + Testers]
After all the tests on the application are completed, it is *deployed* onto the production servers.
**** > maintenance phase[Operator]
At last, comes the *Maintenance phase*. In this phase, the application is monitored for performance. Any issues related to the performance of the application are resolved in this phase.

*** Advantages of the Waterfall Model:
- Simple to understand and use
- Allows for easy testing and analysis
- Saves a significant amount of time and money
- Good for small projects if all requirements are clearly defined
- Allows for departmentalization & managerial control
*** Disadvantages of Waterfall Model:
- Risky and uncertain
- Lack of visibility of the current progress
- Not suitable when the requirements keep changing
- Difficult to make changes to the product when it is in the testing phase
- The end product is available only at the end of the cycle
- Not suitable for large and complex projects

** Agile Methodology
https://www.hashminds.com/wp-content/uploads/2018/01/agile3-e1516054093712.jpg
Agile Methodology is an iterative based software development approach where the software project is broken down into various iterations or sprints. Each iteration has phases like the waterfall model such as Requirements Gathering, Design, Development, Testing, and Maintenance. The duration of each iteration is generally 2-8 weeks.
*** model Agile Process
- In Agile, a company releases the application with some high priority features in the first iteration.
- After its release, the end-users or the customers give you feedback about the performance of the application.
- Then you make the necessary changes into the application along with some new features and the application is again released which is the second iteration.
- You repeat this entire procedure until you achieve the desired software quality.
**** Advantages of Agile Model
- It adaptively responds to requirement changes favorably
- Fixing errors early in the development process makes this process more cost-effective
- Improves the quality of the product and makes it highly error-free
- Allows for direct communication between people involved in software project
- Highly suitable for large & long-term projects
- Minimum resource requirements & very easy to manage

**** Disadvantages of Agile Model
- Highly dependent on clear customer requirements
- Quite Difficult to predict time and effort for larger projects
- Not suitable for complex projects
- Lacks documentation efficiency
- Increased maintainability risks

Now let us move on and discuss the DevOps stages and tools.
*** Diagram 
agile.png
** DevOps Stages and Tools
source : good explaination  https://dzone.com/articles/how-to-orchestrate-devops-tools-together-to-solve
As mentioned earlier, the various stages such as 
 - continuous development, 
 - continuous testing,
 - continuous integration, 
 - continuous deployment, and 
 - continuous monitoring 
constitute the DevOps Life cycle [[img] [https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/10/devops-explanation.png]]. Now let us have a look at each of the stages of DevOps life cycle one by one.

*** Stage – 1: Continuous Development
- Tools Used: Git, SVN, Mercurial, CVS and JIRA
- Process Flow: https://i.stack.imgur.com/UvZ0M.png
- This is the phase that involves ‘planning‘ and ‘coding‘ of the software. You decide the project vision during the planning phase and the developers begin developing the code for the application.
- There are no DevOps tools that are required for planning, but there are a number of tools for maintaining the code.
- The code can be in any language, but you maintain it by using Version Control tools. This process of maintaining the code is known as Source Code Management.
- After the code is developed, then you move to the Continuous Integration phase.

*** Stage – 2: Continuous Integration
- Tools: Jenkins, TeamCity, Travis 
- Process Flow:
- This stage is the core of the entire DevOps life cycle. It is a practice in which the developers require to commit changes to the source code more frequently. This may be either on a daily or weekly basis.
- You then build every commit and this allows early detection of problems if they are present. Building code not only involves compilation but it also includes code review, unit testing, integration testing, and packaging.
- The code supporting new functionality is continuously integrated with the existing code. Since there is a continuous development of software, you need to integrate the updated code continuously as well as smoothly with the systems to reflect changes to the end-users.
- In this stage, you use the tools for building/ packaging the code into an executable file so that you can forward it to the next phases.

*** Stage – 3: Continuous Testing

- Tools: Jenkins, Selenium TestNG, JUnit
- Process Flow:
- This is the stage where you test the developed software continuously for bugs using automation testing tools. These tools allow QAs to test multiple code-bases thoroughly in parallel to ensure that there are no flaws in the functionality. In this phase, you can use Docker Containers for simulating the test environment.
- Selenium is used for automation testing, and the reports are generated by TestNG. You can automate this entire testing phase with the help of a Continuous Integration tool called Jenkins.
- Suppose you have written a selenium code in Java to test your application. Now you can build this code using ant or maven. Once you build the code, you then test it for User Acceptance Testing (UAT). This entire process can be automated using Jenkins.

*** Stage – 4: Continuous Deployment

Tools Used: 
* AWS EC2 installation
* Linux and Shell
Visit : Linux Tutorial for both Linux and Shell

* Vi Editor Tutorial
Visit : vim tutorial
* git
For creating a version control of local repository

We need to Create a version contol file (=.git=) it create by =git init=
There are Three Stages

** short tutorial
#+BEGIN_SRC sh
  git init                                  # Inicialize or Create a version control 
  git status                                # View the Stagging Area
  git add <file>                            # Add files to stagging Area
  git rim --cached <file>                   # Remove files in Stagging Area
  touch .gitignore                          #  list all files  that are need to ignore                    # Ignore files in Stagging Area
  git commit -m "fist commit"               # Save-Commit  to Local Repo
  git remote add orgin https://github.com/....                      # Connect Local Repo to Remote Repo
  git push origin master                    # Upload Local Repo to Remote Repo
  git pull                                  # Update Local Repo
  git clone https://github.com/...          # clone to current dir                    # Clone
  git diff                                  # diff : View changes in fiels

  ## Create and VC a branch :
  mkdir test                                # create local repository "test"
  cd test                                   # move to test folder
  git init                                  # create a new instance
  git branch <branch-name>                  #
  git branch --list                # list of branch 
  git push orign <branch-name>              # git Upload branch
  # git delete a branch in local repository 
  git branch -D devop
  # delete branch at remote repositort
  git push origin --delete <branch name>

  # Switch one branch to other
  git checkout <branch-name>
    # Merge
  # to go to destination (master)
  git chekout master


  # merge brach to existing git
 git merge <branch-name>
 
# rebase


#+END_SRC
** Version Control System
We can save multiple version is a single repository this  is centralised version where it set is stored in server or local host. 

- Distributed vcs
Each programmer will have there  local repository 
eg: git 

 
- architecture
- fork and clone
collaborations
branch, merge and rebase
commands 

** Installation and Configuration Cmd
#+BEGIN_SRC  sh
# installation

## setup

# version
git --version
# >> git version 2.3.2

# Configuration 
git config --global user.name "Dankarthik25"
git config -global user.email "dankarthik25@gmail.com"

# help
git help config
git config --help

#+END_SRC

** Version contol of program or local-repositore
*** Overview Creating a local Repository  
Consider 'Working-Dir' is need to Version Control 

- Git has three main states that your files can reside in: Working-Dir, Stagging Area, Commited: 
  - =Working-Dir=      File but have not have =Version Control= (committed)
    - Tell git  this dir need to (VC) it is done by =git init= which create =.git= file in dir 
    - Add Files         to Stagging area =git add file-name=
    - Remove Files from Stagging Area =git reset=
    - Ignore Files      to Stagging ara  =write (list of file that are to ignored) in  .gitignore= 
  - =Stagging Area=    Marked a modified file  which are to be commit.
    - Note :            All files in Working-Dir should be either add/ignore then only it can be commited
    - Commit File      =git commit=
  - =Committed=      Current files are commented/safed in local Repository =.git directory=.
    - The files are in VC are Know are Local Repository
  - =Remote Repository= 
    - To make a Remote Repository
      - Connet Local Repository to Remote Repository( =url=)
        - =git remote add origin url=
      - Push Local Repositoru to Remote Repository =git push= 
       - =git push origin master=
      - Pull Remote Repository to Local Repository =git pull=
*** How to Commit files ? 
**** initialize  the file or local-repository  (git init):()
Create a version control folder or =initialize= or track (changes or versions) we have to initialize the folder 
#+BEGIN_SRC sh
# go the directory (Local-Repositore) that has to be version control 
git init
#+END_SRC

This will create a =.git= file in the current directory  which consist of all the change that are to be done
**** Adding files to git (git add file)
files which are uncommited are changed to =staged= 
#+BEGIN_SRC sh
git add <file>             # add files to git
git add -A                     # add all file
git status                     # show <file> or all file are change to commited area
#+END_SRC
***** Example:
#+BEGIN_SRC sh
git add .gitignore
git add .emacs
git add .vimrc
#+END_SRC
 =.gitignore=  which was in untracked () is changed to staging area or committed
**** Removing files from git (git reset file)
#+BEGIN_SRC sh
git reset <file>                     # remove  files from stating area( committed)
git reset                                  # remove all files
#+END_SRC
**** .gitignore
hidden file =.gitignore=  contain the list of the all the file and folder that ignore by git for version control
#+BEGIN_SRC sh
touch .gitignore
ls -a >> .gitigonre	# and remove the files need to be VC
#+END_SRC
***** Example
in file add the file or folders that are to ignored by git
#+BEGIN_SRC sh
# file that are to ignore
.DS_Store
.project
*.pyc
#+END_SRC
**** Commit files (git commit)
Note : All files are need to to add/ignored then only we can commit files
#+BEGIN_SRC sh
  git add -A
  git commit -m "Initial Commit"                        # file are commited 
  git status                                                                  # show nothing to commit , working directoru clean    
#+END_SRC
*** Connect Local Repository to Remote Repository
  #+BEGIN_SRC sh
git remote add origin url    # eg: git remote add origin https://github.com/dankarthik25/pythonUdemyTutorial  
  #+END_SRC
*** Push Local Repository to Remote Repository (git push)
#+BEGIN_SRC sh
git push origin master
# git push origin master -f     # Force if cmd not works
#+END_SRC
*** TODO Pull Remote Repository to Local Repository
#+BEGIN_SRC sh
git pull
#+END_SRC
*** Creating a Branch (git branch <branch-name>)
source : https://nvie.com/posts/a-successful-git-branching-model/ 
#+BEGIN_SRC sh
git branch UncleDaveEmacs       # Create a branch
git checkout UncleDaveEmacs        # If you move to different branch then you Current Dir will change to files that contain Branch Files

# to create and moveing to the <branch-name>
git chechout -b <branchname>


# Do the changes in Working Dir 
git status                         # check status  and add,ignore that are need to be done
git commit -m 'Emacs Configuration of Uncle Dave '
git push -u origin UncleDavesEmacs

# show branchs
git branch
git branch --list

# delete a branch 
git branch -D UncleDaveEmacs

# delete a branch in remote repository
git push origin --delete UncleDaveEmacs

#+END_SRC

**** Example for branching
#+BEGIN_SRC sh
git pull  # synchronize with remote repo

git branch --list # list of branch
git branch devop # cretae devop branch

git chechout devop # move to devop branch

touch kk
git add .
git commit -m "created kk file in devops"

git push origin devops
#+END_SRC
*** merge
#+BEGIN_SRC sh
# to git <branch-name>
git checkout master

# git merge <other-branch-name>
git merge devop

##  Example 

# create nn file in "devop"  branch
git checkout devop
touch nn
git add .
git commit -m "created nn file"
git push  origin devop

# merge "devop" branch to  "master branch"
git chekchout master

#+END_SRC


*** log
Consist of < commit id, Author, Date, Comment on commit > 
 mode on your branch
#+BEGIN_SRC sh 
git log 

git log --online # give short version only < commit id, comment >
#+END_SRC
*** revert :
when code is pushed to remote but you want changes back from remote > local 
#+BEGIN_SRC sh
git log --oneline # to get the commit id

git revert 77592f3   # to change code frome to remote to local repo

# to change the code from local to remote we need to push from local to remote

git push origin master


#+END_SRC

*** Clonning a repository
#+BEGIN_SRC sh
git clone <url> <path- which dir>
git clone ../remote_repo.git .
git clone <url> .                        # . means current direcory
#+END_SRC

** Pull vs fetch

fetch : it's hold the data  and it need to  merged  in repo

pull : = git fetch + git merg
#+BEGIN_SRC sh
# fetch hold data(fetch data from remote  repository to local repository)  r  but not merges with current reposiotory
git fetch

# it merges local repository to current repository 
git merge

 
# pull
git pull origin <branch-name>

#+END_SRC


** reset vs revert
there are 3 stagge in repository in git
working copy > staging  > local > remote

git reset : is used go backworkd for local to staging 

reset : local repo to  stageing  to working copy
- reset are   3 types
  - git reset --soft 
  - git reset --mixed
  - git reset --hard
#+BEGIN_SRC sh
git reset --hard 77592f3
git reset --soft 77592f3
git reset --mixed 77592f3
#+END_SRC


** merge vs rebase vs cherrypick 
For merge : new <commit id>  will be create and add <branch> <commit id > to which branch it is prescent
For rebase : it chaganes history(log file) or add history
For cherry-pick add particular <commit -id>
#+BEGIN_SRC sh
git checkout master
touch aaa
git add aaa
git commit -m "created aaa file in master"

git checkhout -b "release-1.0"
git rebase master 

#+END_SRC

*** cheery pik
#+BEGIN_SRC sh
git checkout -b future
touch ww
git add .
git commit -m "create ww file"
touch ww

touch www
git add .
git commit - m "create www file"


touch wwww
git add
git commit - m "create wwww file"

touch wwwww | git add .
git commit -m "create wwwww file"

git log --online 

# Q) merge only www file from future brach to master
git log --online # to get the <commit -id> of www file : b877590

git checkout master

git cherry-pick b877590

#+END_SRC
** conflicts
When two branch <kar> <sanjay> make different change in a same file 
#+BEGIN_SRC sh
git checkout master
vi ww
# hello

git add  .
git commit -m "modified ww file"

git log 

git checkout future
vi ww
# hello,
# book ticktes

git commit -m "modifiled ww file"

git checkout master

git merge future 
#ERROR mESSAGE: CONFLICT (content): merge confilct in ww
#             : fix conflicts and then commit the results
vi ww

#+END_SRC

** Interview Qusestion
- Q)If branch and merge, and pull and push  are done my devops then what is role of devops 
- Ans) devops role is to create hotfix branch and and set a maile to devops  
** stash

* Github

version control 
sharing code
* Build maven
-  install maven in ubuntu there are two ways
    - using apt-get install
    - using wget and extracting and creating link
** install using apt-get
#+BEGIN_SRC 
sudo apt install default-jdk
java -version
sudo apt update
sudo apt install maven
mvn - version

#+END_SRC
** using wget and extracting and install
#+BEGIN_SRC sh
# Download maven in /temp using wget
wget https://www-us.apache.org/dist/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz -P /tmp
 # extract the archive to /opt directory
sudo tar xf /tmp/apache-maven-*.tar.gz -C /opt
#  more control over maven version and update we will create a symbolic link<maven> that will point to maven installation directory
sudo ln -s /opt/apache-maven-3.6.0 /opt/maven
#+END_SRC
https://linuxize.com/post/how-to-install-apache-maven-on-ubuntu-18-04/

** Setup environment variable
#+BEGIN_SRC sh
# Open mavenenv.sh in /etc/profile.d dir
sudo nano /etc/profile.d/maven.sh

# add environment variables
export JAVA_HOME=/usr/lib/jvm/default-java
export M2_HOME=/opt/maven
export MAVEN_HOME=/opt/maven
export PATH=${M2_HOME}/bin:${PATH}
# save and close the file 

# change mod of maven to execute
sudo chmod +x /etc/profile.d/maven.sh

# load the environment variable using source command
source /etc/profile.d/maven.sh

# verify the installation
mvn -version
#+END_SRC

** Create maven project
#+BEGIN_SRC sh
cd /Workspace/Devops # Directory for maven project
mvn archetype:generate -DgroupId=world -DartifactId=india -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
# [INFO] ----------------------------------------------------------------------------
# [INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-webapp:1.0
# [INFO] ----------------------------------------------------------------------------
# [INFO] Parameter: basedir, Value: /home/jayradhe/Workspace/Devops
# [INFO] Parameter: package, Value: world
# [INFO] Parameter: groupId, Value: world
# [INFO] Parameter: artifactId, Value: india
# [INFO] Parameter: packageName, Value: world
# [INFO] Parameter: version, Value: 1.0-SNAPSHOT
# [INFO] project created from Old (1.x) Archetype in dir: /home/jayradhe/Workspace/Devops/india
# [INFO] ------------------------------------------------------------------------


#+END_SRC

* Servers (Tomcat) 
we are using tomcat 9 server there is 10 but 10 is alpha and 9 is stable version

** installation
https://www.youtube.com/watch?v=Feui5F42bII
#+BEGIN_SRC sh
# cd Workspace/Devops/tomcat # directory where tomcat is install 
# get link for tomcat 9 tar file
wget https://mirrors.estointernet.in/apache/tomcat/tomcat-9/v9.0.31/bin/apache-tomcat-9.0.31.tar.gz


# extract tar file
tar -xvzf apache-tomcat-9.0.31.tar.gz

# install java file # /software/jdk1.8.0_131
vi ~/.bashrc

# insert below text
# JAVA ENVIRONmENT VARIABLES
export CATALINA_HOME=/Workspace/Devops/tomcat
# export JAVA_HOME=/Workspace/Devops/tomcat/bin

# run bash
source ~/.bash_profile

cd Workspace/Devops/tomcat
sh startup.sh
firefox localhost:8080
#+END_SRC
** installation version 2
#+BEGIN_SRC sh
mkdir /opt/tomcat
mv apache-tomcat-9.0.31.tar.gz /opt/tomcat
cd /opt/tomcat
md5sum apache-tomcat-9.0.31.tar.gz
tar -xvzf apache-tomcat-9.0.31.tar.gz
cd apache-tomcat-9.0.31/bin
chmod 700 /opt/tomcat/apache-tomcat-9.0.31/bin/*.sh

# Create symbolic link 
ln -s /opt/tomcat/apache-tomcat-9.0.31/bin/startup.sh /usr/local/bin/tomcatup
ln -s /opt/tomcat/apache-tomcat-9.0.31/bin/shutdown.sh /usr/local/bin/tomcatdown

# To start tomcat as root anywhere in shell
tomcatup

# To stop tomcat
tomcatdown

#+END_SRC
** install using apt-get 
https://www.youtube.com/watch?v=26ipmonPmRw
#+BEGIN_SRC sh
sudo apt-get install tomcat9-docs
sudo apt-get install tomcat9-examples
sudo apt-get install tomcat9-admin
sudo start tomcat9
sudo status tomcat9
sudo service tomcat9 stop
sudo status tomcat9
#+END_SRC

** Configurations
https://www.youtube.com/watch?v=pVrix9lo5zA
used for shortcut tomcatup, tomcatdown and more cmd for installation
#+BEGIN_SRC sh
ln -s /opt/softwares/apache-tomcat-9.0.31/bin/startup.sh /usr/local/bin/tomcatup
ln -s /opt/softwares/apache-tomcat-9.0.31/bin/shutdown.sh /usr/local/bin/tomcatdown

#+END_SRC
** Example 
SampleWebApp.war file
https://www.middlewareinventory.com/blog/sample-web-application-war-file-download/
#+BEGIN_SRC sh
# download  or SampleWebApp.war file to tomcat/webapps dir # 
# /home/jayradhe/Workspace/Devops/apache-tomcat-9.0.31/webapps

# Run tomcat server
sh /home/jayradhe/Workspace/Devops/apache-tomcat-9.0.31/bin/startup.sh

# Stop tomcat server
sh /home/jayradhe/Workspace/Devops/apache-tomcat-9.0.31/bin/shutdown.sh

#+END_SRC

** Example 2
https://github.com/kliakos/sparkjava-war-example

#+BEGIN_SRC sh 
# get clone to local repository
# cd /home/jayradhe/Workspace/Devops # local repository
git clone https://github.com/kliakos/sparkjava-war-example.git

#+END_SRC
* Jenkins 
- Jenkins 
  - how to create jobs
  - checkout git
  - goal package
  - send a mail
  - archive powershell scripts
  - execute powershell scripts
  - permission 
  - dependencies
  - upstream and downstream - 
  - pipeline(build)
  - distribution
  - master-slave 
  - Countious Integration (CI)
  - Countious Development
  - backup
  - build triggers (poll SCm)

** installation
- Jenkins can be install in 3 ways
  - 1. using executal file (unzip and install)
  - 2. using java    (java -jar jenkins.war)
  - 3. inside tomcat (jenkins.war files) 
    - install tomcat then copy jenkins.war to tomcat/webapps
    - run tomcat start and open https://localhost:8080/jenkins
*** Using zip file
#+BEGIN_SRC sh
# Install java(jenkins is java 8 app) so install openjdk
sudo apt update
sudo apt install openjdk-8-jdk
 
# add Jenkins debian repository 
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add - 
# above cmd  should output OK which means that the key has been successfully imported and packages from this repository will be considered trusted.

# add Jenkins repository to sys 
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'


# install jenkins
sudo apt update
sudo apt install jenkins # automatically run jenkins

# check running status of jenkins server 
systemctl stauts jenkins

# start jenkins
sudo systemctl start jenkins

sudo service jenkins restart
sudo service jenkins stop
sudo service jenkins start

# OR : alternate
sudo systemctl start jenkins.service
sudo systemctl stop jenkins.service
sudo systemctl restart jenkins.service

# Open Firewall
sudo ufw allow 8080

# set Wrokspace



# give administator password from : ..../Jenkins/secrets/initialAdminPassword file
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
# select <install suggested plugins>

# sign in to jenkins 
user     : admin
password : /Jenkins/secrets/initialAdminPassword

create user : dankarthik
passwrod : dankarthik
 
#+END_SRC
*** Install jenkins in tomcat
#+BEGIN_SRC sh
cd /opt/softwares/apache-tomcat-9.0.31/webapps
 
wget https://updates.jenkins-ci.org/download/war/2.204/jenkins.war

tomcatdown
tomcatup

#+END_SRC
** Configurations
we can add software using plugins like
powershell plugin,git,maven.....etc

there are 3 status : udpdate, available, install

** Integrating with gmail
how to create a empty job ?
how to configure git,maven ?
how to send an email to other ?
 - why should i share user and pwd to other client,middle-men, higher secured so we need to configure  and we send only log file to client,manager...etc

Path : Jenkins/manage Jenkins/Configure System/

step1: 
manage jenkins - configure system - email notification:
smtp.gmail.com
@gmail.com
username: sanjy@gmail.com
passwd:

use ssl checked
port:456

step2: go to google account -> security-> on less security 
test:
sajay@gmail.com

go to job:
post build actions->editable email notification -> mails

attached log
aways

save

build now 
#+BEGIN_SRC 
SMTP server name : smtp.gmail.com
User name: user_email_id@gmail.com
Password: 123456
Use SSL : Checked
SMTP Port: 456

#+END_SRC

#+BEGIN_SRC 
email :
step1: 
manage jenkins - configure system - email notification:
smtp.gmail.com
@gmail.com
username: sanjy@gmail.com
passwd:

use ssl checked
port:456

step2: go to google account -> security-> on less security 
test:
sajay@gmail.com

go to job:
post build actions->editable email notification -> mails

attached log
aways

save

build now 

#+END_SRC
** Permissions

** master -slave :
https://www.youtube.com/watch?v=8dZKT79DUfk
copy D:\jenkins\worksape\sample\target\*.war D:\tomcat\webapps

Find tomcat installation folder
delete hello-world (Note : tomacat server is shutdown then delete)

AIm : directly paste helloworld.war or all war file using jenkins in windows(install powershell plugin )




install java,git, maven in linux aws- server

What is master -slave concepts ?
master ? where your cloud install jenkins
workspace : eg :/roor/.jenkins
            eg :D:/Workspace/jenkins/

consider master in Window and slave is aws-ec2-linux(jenkins is not install)

Aim : all master job should be done in slave (/opt/devops)

Step 1 : in slave (get ip address, key)
Step 2 : install (java, maven,git....etc) in slave
Step 3 : Create New Node(In Jenkins Node means Salve-server ) and Connect to Node to Jenkins  

*** INSTALL JAVA
#+BEGIN_SRC sh
# #####################################################
#   Java(1.8_0191,1.8_0131) installation in Linux# ####################################################
# dir to install software

sudo su-
mkdir sofwares

cd /opt/softwares


# install java- 8 (does not support higher version)
# updated for jdk 8u191
#wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;" "https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz"

# updated for jdk 8u131
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz"

# extract tar file
tar -xvzf jdk-8u131-linux-x64.tar.gz
rm -rf jdk-8u131-linux-x64.tar.gz

 # install java file # /software/jdk1.8.0_131
 vi ~/.bash_profile

# insert below text
# JAVA ENVIRONmENT VARIABLES
export JAVA_HOME=/opt/softwares/jdk1.8.0_131
export PATH=$PATH:/opt/softwares/jdk1.8.0_131/bin

# run bash
source ~/.bash_profile
java -version
#+END_SRC

*** INSTALL GIT AND maven
#+BEGIN_SRC sh
yum install git -y
#+END_SRC

*** INSTALL maven
#+BEGIN_SRC sh
cd /opt/softwares/

wget https://www-us.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz

vi ~/.bash_profile
#insert 
export M2_HOME=/opt/softwares/apache-maven-3.6.3
export PATH=$PATH:/opt/softwares/apache-maven-3.6.3/bin

# run bash_profile
source ~/.profile

mvn -version
#+END_SRC

*** Create and Connect Node(Slave-servet) to Jenkins(master- server)
Jenkins > manage Jenkins > mange Node(Slave) > New Node > 
> Node name : <Slave-Server Name>
> Permanaent Agent : enable
Fill Form 
Name, 
executors : 1
remote root directory : /opt/deploy/ # dir in slave server
label : orange
Launch method : Launch agents via SSH
   - Host Name : 18.188.173.210       
,  - Credentials : Jenkins
       - Kind : SSH Username with private key
       - Usernaem: ec2-user
       - Private key : enable
       - key : copy the key
Host Key Verification Strategy : Non verification Strategy

Node Progeries :

Toot Locations :
  - Name :  Java
  - Home : /opt/software/jdk1.8.0_131
  - Name : maven
  - Home : /opt/software/apache-maven-3.6.3/

BUG : if java, maven are not present then 
Jenkins > mangae Jenkins > Global Tool Configuratoin > JDK (Add JDK) , maver(Add maven) 
** Add slave in jenkins
manage jenkins > mange nodes
 
#+BEGIN_SRC sh
# install powershell
#+END_SRC

run as admin
start jenkins



  
** Install jenkins in tomcat servier using war file
#+BEGIN_SRC sh
# get jenkins.war file link for
tomcatdown
wget link
tomcatup
# browers : :8080/jenkins/
 


#+END_SRC
* TODO Continuous Deployment
* TODO Ansible :
Ansible : It is Configuration management tool - more than 1 server at a time we can deploy the code...
  #+BEGIN_SRC sh

#
# create one common user in both or all servers :host name to  "ACmaster","AC-work1","AC-work2" .........
#

#
# Create user "ansible user"
#

useradd ansible
passwd ansible

#
# give root previllages for the "ansible user" for all servers
#

#visudo 
#echo 'ansible All :(All)      NOPASSWD : ALL' >> visduo

#
# Allow ssh for the "ansible user"
#
vi /etc/ssh/sshd_config
Passworddauntentication yes
service sshd restart

#
#    
#

  #+END_SRC
* TODO Docker
* TODO Phase 5: Continuous Monitoring 
(Tools Used: Splunk, ELK Stack, Nagios, New Relic)
