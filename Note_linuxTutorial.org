
Linux Tutorial
* Linux Cmd 
** Linux File System
#+BEGIN_SRC 
(/): Directory
├── bin           # binary like ls,cat........ 
├── boot          # boot loader and grub boot prg are present 
├── cdrom
├── core
├── dev           # devices: in linux: Has file system  "EVERY THING IS A FILE "
|                 # CONSsist of hardware, partions(sda,sda1,...,nvdia,web-cam)
|
├── etc           # all configuration files (/etc/passwd)
|
├── home          # (like c: drive os-users) cd ~ or cd <Enter>   
|
|
├── lib           # libray which are used to perform varies function 
├── lib32         # required by bin and sbin files 
├── lib64
|
├── lost+found
|
├── media         # media (external hard disk  ) fixed os manges
├── mnt           # mount (usb,mobile,,,,,) removalble  
|
├── opt           # optional folder:  user space for exectue or store
├── proc          # sudo file : information of sys process and resources
├── root
├── run           # temp flies(ram) : Used for process which is boot early
├── sbin          # sys binary and standard users are not acess
├── snap          # snap packages are stored
├── srv           # service directory: If you run servers  the file are stored  
├── swapfile
├── sys           # way to interact with kernel
├── timeshift
├── tmp           # temparay folder 
├── usr           # user app space 
├── var           # all logs files are 
└── vmlinuz

#+END_SRC
** Linux BASIC cmd
#+BEGIN_SRC sh
    #############################################################
    #   Root User 
    # ##########################################################
    sudo su - # root user  # what is password for sudo su - ? 
    # How to know root user and normal user 
    # root user as       [root@ip-172-31-30-43 ~]#
    # normal user as [ec2-user@ip-172-31-30-43 ~]$

    # root user start with #(ash symbal) 
    # normal user start with $(doller symbol)

    sudo -i   # (alternative of root user)
    whoami
    # ##########################################################
    # Change directory
    # ##########################################################
    cd ..        # parent directory
    cd           # home directory
    cd ~         # home directory
    cd /         # root direcoty
    cd /opt      # 
    cd ~/.bashrc # in home dir .bashrc file

    # direct path or home path
    cd ~/Workspace/
    cd /home/jayaradhe/Workspace/


    # ##########################################################
    # print working directory
    # ##########################################################
    pwd 
    #  [root@ip-172-31-19-8 python]# pwd
    ## /etc/python



    # ###########################################################
    # list directory
    # # ##########################################################
    ls
    ls -a                # all hidden files and dir
    ls -l                # long list format 
    ls dir/sub_dir_1/sub_dir_2
    ls -latr             # reverse 
    # How do you know the file in list is dir in (ls - l)
    # in < ls-l > cmd as d --- --- --- then it is directory


    ## ##########################################################
    #   Directory 
    ## ##########################################################
    mkdir SubDir1      # Create a Dir
    rm -R SubDir1      # Delete folder(dir) and inside files RECURSIVELY

    mv /path Orginal_Dir1 /path moved_ParentDir/ # move directies
    # mv /home/dan/MyNotes_personal_2 /home/dan/Pictures/



    cp -r /path/subdir1 /path/copied_subdir1   # copy directory recursively
    rm -rf subdir1

    #
    # help
    # 
    man ls

    type echo # inbuilt or nor  with address



    ## ##########################################################
    # File/Directory Creation, Delete,copy,move,rename manupulation cmd
    ## ##########################################################


    touch test_file.txt              # create a file 
    mkdir test_files                 # create a directory
    cp test_file.txt copy_file.txt   # copy(or) duplicate a file
    mv test_file.tzt rename_file.txt # rename a file
    mv orig_file.txt SubDir1/        # move  to SubDir1 
    mv orig_file.txt SubDir1/rename_file.txt # move and remane 
    rm orig_file.txt   # Delete a file
    rm -R SubDir1      # Delete folder(dir) and inside files RECURSIVELY
    rm -rf subdir1


    ## ##########################################################
    # Read and Write file in terminal
    ## ##########################################################
    cat orig_file.txt  # print content of file in terminal
    vi orig_file.txt   # edit file
    nano orig_file.txt
    gedit orig_file.txt
    head -n1 /etc/passwd
    tail -n1 /etc/passwd
    less /etc/passwd


    ## ##########################################################
    # SEARCH and Replace "STRING/TEXT" in file 
    ## ##########################################################

    # grep : search string/text in a file
    # grep "<text-need-2-search>" <filename>
    grep "at" sat

    #replace text

    # sed -i 's/oldname/newname/g' <filename>
    # s (substitue) oldname / newname/g(global) in <filename>
    sed -i 's/todya/wednesday/g' sat
    less sat #  displays file contents or command output one page at a time in your terminal. 
             # less is most useful for viewing the content of large files 

    ## ##########################################################
    # Find files/directory 
    # # ##########################################################

    find <path> -type f -name <name> # For find file
    find <path> -type d -name <name> # For find dir

    # Examples 
    touch phani kar sanjay sathish
    find /devops -type f -name kar # search "kar" file
    find /devops -type f -name "*.txt"
    mkdir india pakistan austriala asia china japan
    find /devops -type d -name asia               # search asia

    find . -type -d asia # '.' search in current dir(.)




    ## ##########################################################
    ##                   zip and un-zip         
    ## ########################################################## 

    tar -cvzf india.tar india            # c : craete v: verboz, z: zip   f:file
    tar -xvzf india.tar                  # x: extrach 


    ## ##########################################################
    # File permissions:
    ## ##########################################################

    # Change mode (permissions)

    drwx-rwx-rwx
    owner-group-user
    d: driectory 
    x(1) : user
    w(2) : write
    r(4) : read 

    0: --- 
    1: --x
    2: -w-
    3: -wx
    4: r--
    5: r-x
    6: rw-
    7: rwx
      ## ##########################################################
         chmod 777 sat          # drwx rwx rwx   file
         chmod -R 777 phani     # dir and inside files
         chmod +x <file_name>  
         chmod 755 sat         # drwx r-x r-x 
         chmod 400 aws_key.pem # -r-- --- --- 
         ## ##########################################################
         -rwx  rwx   rwx        1 root  root  1156 Mar 24 08:36 hosts
         -rw   -r--  r--        1 root  root     0 Mar 24 14:17 ansible.txt
      # owner-group-user        owner  group

  # Who are owner group and users in change mode ?


  ## ##########################################################
  # change owner of file or dir : chown
  ## ##########################################################
  chown owner-user file 
  chown <owner-user>:<owner-group>  <file/directory>
  ################################################################
  [root@ansible-master ansible]# chown -R ansible:ansible ansible.txt 

  -rwxrwxrwx  1 root    root     1156 Mar 24 08:36 hosts
  -rw-r--r--  1 ansible ansible     0 Mar 24 14:17 ansible.tx


  # ls -l demo.txt      #>> -rw-r--r-- 1 root root 0 Aug 31 05:48 demo.txt

  # chown vivek demo.txt 
  # ls -l demo.txt      # >> -rw-r--r-- 1 vivek root 0 Aug 31 05:48 demo.txt

  # chown vivek:vivek demo.txt
  # ls -l demo.txt      #>>   -rw-r--r-- 1 vivek vivek 0 Aug 31 05:48 demo.txt


  chown ec2-user:ec2-user <file/dir>

    # Eg:
    cd ~
    mkdir devops
    ls -latr
    chown -R ec2-user:ec2-user devops
    ls -latr 



    ## ##########################################################
    #    SSH
    ## ##########################################################

    # connect one linux to other linux
    ssh <other-user-name>@ip
    # passwd enter

    # copy for other user to current user
    scp <source-file-path> username@ip: <dest-path>
    scp -i key.pem /path/to/myfile.txt ec2-user@IPAddressOfEC2:/ 

    ## ##########################################################
    #  Create Users
    ## ##########################################################

    user <new-user-name>   # create users
    passwd <new-user-name> # set password
    passwd <user-name>     # change password

    #eg :
    useradd phani
    passwd phani
    # Enter password


    cat  /etc/passwd       # to see password


    # histor
    ls -latr | grep test.sh | rm -rf
  # disk size or disk free
    df - h # 

    ## ##########################################################
    # system moitor 
    ## ########################################################## 
    top # user id, user, cup, mem, swap, process name , process id # Ctrl-C


    # ## ##########################################################
    # diskspace or disk free (used available, % used) 
    # ## ##########################################################
    df -h # Or

  #Filesystem      Size  Used Avail Use% Mounted on
  #udev            3.8G     0  3.8G   0% /dev
  #tmpfs           776M  1.6M  775M   1% /run
  #/dev/sda1       916G  550G  320G  64% /
  #tmpfs           3.8G  212M  3.6G   6% /dev/shm
  #tmpfs           5.0M  4.0K  5.0M   1% /run/lock
  #tmpfs           3.8G     0  3.8G   0% /sys/fs/cgroup
  #/dev/loop0      185M  185M     0 100% /snap/eclipse/40
  #/dev/loop1       63M   63M     0 100% /snap/gtk-common-t

    df -aPh # -a :all, P: Portable, h: human read able

    ## ##########################################################
    # directory size:  du -sh <dir_name> 
    # disk  usage :
    ## ##########################################################

    du -sh asia  # -s : summarize , # -h : human readable
    du -sh sat
    du -sh * # size in current directory
    du -sh *.jpg # size of all jpg formate
  # du -h Gitabase
  # 378M	Gitabase

    ## ##########################################################
    # RAm size
    ## ##########################################################
    free -m
    free -mh #  free or available ram in Gb or Mb


  ## ##########################################################
  # process running 
  ## ##########################################################
  ps -ef | grep <process-name>
  ps -ef| grep tomcat
  # UID        PID  PPID  C STIME TTY          TIME CMD
  # jayradhe 23909  7504  0 13:38 pts/0    00:00:00 grep --color=auto tomcat

  # UID: USER iD
  # PID : Process Id
  # PPID: Parent Process Id
  # $ kill -kill <PID>  # to kill process
  # $ kill -term <PID>  # to kill process

  # $ kill -l 

  # 1) SIGHUP	        2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP
  # 6) SIGABRT	7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1
  #11) SIGSEGV  	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM
  #16) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP
  #21) SIGTTIN  	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ
  #26) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR
  #31) SIGSYS  	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3
  #38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8
  #43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13
  #48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12
  #53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7
  #58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2
  #63) SIGRTMAX-1	64) SIGRTMAX	

  kill -9 23909 

  kill -9

    ## ##########################################################
    #         Network Cmd
    ## ##########################################################

    ping google.com          # ping ip/dns/
    nslookup google.com      # for querying the Domain Name System to obtain domain name or IP address mapping, or other DNS records.
    telnet google.com 23     # check port 
    ifconfig
    netstat                  # (network statistics) displays network connections: Ip,port PID 
                             #  # Proto,  Recv-Q, Send-Q, Local Address(Port)           Foreign Address         State       PID/Program name
    # GET ip
  ping google.com
  #PING google.com (172.217.163.46) 56(84) bytes of data.
  # 64 bytes from maa05s01-in-f14.1e100.net (172.217.163.46): icmp_seq=1 ttl=55 time=16.5 ms
  # 64 bytes from maa05s01-in-f14.1e100.net (172.217.163.46): icmp_seq=2 ttl=55 time=17.1 ms
  # 64 bytes from maa05s01-in-f14.1e100.net (172.217.163.46): icmp_seq=3 ttl=55 time=20.2 ms
  # 64 bytes from maa05s01-in-f14.1e100.net (172.217.163.46): icmp_seq=4 ttl=55 time=88.2 ms

  nslookup google.com      # for querying the Domain Name System to obtain domain name or IP address mapping, or other DNS records.

  # Server:		127.0.0.53
  # Address:	127.0.0.53#53

  # Non-authoritative answer:
  # Name:	google.com
  # Address: 172.217.163.46
  # Name:	google.com
  # Address: 2404:6800:4007:80b::200e


    # check ports is running
  netstat -anp | grep <ports-no> # all  p: PID , n: doesnot resolve name
  # Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
  # tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      -                   
  # tcp        0      0 192.168.0.105:37756     52.40.23.85:443         ESTABLISHED 11770/firefox       
  # tcp        0     32 192.168.0.105:52374     34.195.246.183:443      LAST_ACK    -
  # Active UNIX domain sockets (servers and established)
  # Proto RefCnt Flags       Type       State         I-Node   PID/Program name     Path
  # unix  2      [ ACC ]     STREAM     LISTENING     34772    2332/systemd         /run/user/1000/systemd/private
  # unix  2      [ ACC ]     STREAM     LISTENING     31708    -                    /run/user/123/systemd/private
  # unix  2      [ ACC ]     STREAM     LISTENING     34776    2332/systemd         /run/user/1000/snapd-session-agent.socket
  # unix  2      [ ACC ]     STREAM     LISTENING     31712    -                    /run/user/123/gnupg/S.dirmngr
  # unix  3      [ ]         STREAM     CONNECTED     3237440  11770/firefox        
  # unix  3      [ ]         STREAM     CONNECTED     3233405  7229/firefox         
  # unix  3      [ ]         STREAM     CONNECTED     2101124  3731/vlc             
  # unix  3      [ ]         STREAM     CONNECTED     830211   2389/dbus-daemon     /run/user/1000/bus
  # unix  3      [ ]         STREAM     CONNECTED     38761    2712/blueberry-obex  
  # unix  3      [ ]         STREAM     CONNECTED     38294    -                    /var/run/dbus/system_bus_socket
  # unix  3      [ ]         STREAM     CONNECTED     37112    -                    /var/run/dbus/system_bus_socket
  # unix  3      [ ]         STREAM     CONNECTED     31184    -                    /var/run/dbus/system_bus_socket
  # unix  3      [ ]         STREAM     CONNECTED     37567    2813/cinnamon-scree  
  # unix  3      [ ]         STREAM     CONNECTED     24609    -                    
  # unix  3      [ ]         STREAM     CONNECTED     2099806  3731/vlc             
  # unix  3      [ ]         STREAM     CONNECTED     37262    2489/csd-color       
  # unix  3      [ ]         STREAM     CONNECTED     23321    -                    /var/run/dbus/system_bus_socket
  # unix  3      [ ]         STREAM     CONNECTED     2529413  11770/firefox        
  # unix  3      [ ]         STREAM     CONNECTED     2022448  11770/firefox        
  # unix  3      [ ]         STREAM     CONNECTED     833750   3244/gvfsd-trash     @/dbus-vfs-daemon/socket-6kJqXg56
  # unix  3      [ ]         STREAM     CONNECTED     38987    -                    /var/run/dbus/system_bus_socket

  uptime  # find out how long system is active.
  #Display the time since the last boot

  #  
  #   Run levels https://www.liquidweb.com/kb/linux-runlevels-explained/
  #
  Run levels 
  #Q) What is runlevels in linux


  # 
  #  awk: cut columwise:
  #
  # syntax : awk '{print $3}' filename
  df -h |grep /dev/xvda1 

  # Example 
  touch users
  vi users
  ## insert below text
  # sno     course   name  fee
  # 1      devops   phani 15
  # 2      devops   kar  15
  # 3      devops   san 15
  awk '{print $3}' sat

  # Example : find size of /dev/xvda1
  df -h |grep /dev/xvda1 | awk '{print $1, $4}'

  #
  #   Cut CHARACER Columwise : cut -c
  #
  cut -c 1 filename      # f
  cut -c 1-5 filename    # filename
  cut -c 1,6 filename    # fa
  cut -c 1 sat 


#+END_SRC
** TODO Crontab
For Crontab : Example visit https://crontab.guru/examples.html
#+BEGIN_SRC sh

#
#    Crontab  
# 
# *  *  *   *   * 
# mm hh dd mon wek
# 1 * - minutes(0-59)
# 2 * - hours(0-23)
# 3 * - days(1-31)
# 4 * - months(1-12)
# 5 * - weeks(1-7)

# https://www.geeksforgeeks.org/crontab-in-linux-with-examples/

# Every 6.30am check diskspace  
30 6 * * *  df - h
#execute the Full backup shell script (full-backup) on 10th June 08:30 AM.
30 08 10 06 * /home/maverick/full-backup

# 1,2,3,5,8,13,21,34 * * * * df - h 
# Crontab will run Every Hour at 
# xx:01:00 (hh:mm:ss)
# xx:02:00
# xx:03:00
# xx:05:00
# xx:08:00
# xx:13:00
# xx:21:00
# xx:34:00


# Crontab for every 15 mints
0,15,30,45 * * * * dh -h
#or
*/15 * * * * df - h

# Every 2 hours
0 */2 * * * 

# Every 3 hours
0 */3 * * * 

crontab -e # edit cron tabs
crontab -l # list
crontab -r # delete 

#  *	        any value
#  ,	        value list separator
0,15,30,45 * * * * dh -h

#  /         	  step values
0 */2 * * * # every 2 hours
0 */3 * * * # every 3 hours  

#  -	        range of values
Say I have a crontab which runs every 20 minutes and I have a hour range which can vary so lets say 5-23, which in one example could look like
*/20 5-23 * * * dh -h
#  @yearly  	(non-standard)
#  @annually	(non-standard)
#  @monthly 	(non-standard)
#  @weekly  	(non-standard)
#  @daily   	(non-standard)
#  @hourly	   (non-standard)
#  @reboot  	(non-standard)

#+END_SRC
** run 
#+BEGIN_SRC sh
  # 
  # run shell scripts 
  
  ./name.sh
  sh -x name.sh # debugging mode or Trouble shoot
  sh name.sh
  source name.sh

#+END_SRC


* Linux Interview Question
** 36) What are environmental variables?

Environmental variables are global settings that control the shell's function as well as that of other Linux programs. Another common term for environmental variables is global shell variables.

** 39) What is redirection?

Redirection is the process of directing data from one output to another. It can also be used to direct an output as an input to another process.

** 40) What is grep command?

grep a search command that makes use of pattern-based searching. It makes use of options and parameters that are specified along with the command line and applies this pattern in searching the required file output. 

** 43) How do you terminate an ongoing process?

Every process in the system is identified by a unique process id or pid. Use the kill command followed by the pid to terminate that process. To terminate all process at once, use kill 0. 
** 46) How do you execute more than one command or program from a single command line entry?

You can combine several commands by separating each command or program using a semicolon symbol. For example, you can issue such a series of commands in a single entry: 
** 47) Write a command that will look for files with an extension "c", and has the occurrence of the string "apple" in it.

Answer:

 Find ./ -name "*.c" | xargs grep –i "apple"

** 48) Write a command that will display all .txt files, including its individual permission.

Answer:

ls -al *.txt
** more questions
https://www.edureka.co/blog/interview-questions/linux-interview-questions-for-beginners/

** 28. What are the Process states in Linux?

Ans:  Five process states in Linux. They are

   -  New/ Ready: A new process is created and ready to run.
   -  Running: The process is being executed.
   -  Blocked/ Wait: The process is waiting for input from the user. 
   -  Terminated/ Completed: The process completed the execution or terminated by the operating system. 
   -  Zombie: The process is deleted, but still the information regarding the process exists in the process table.

Linux Process states
 
  #  
  #   Run levels
  #
** What is  Run levels 
  #Q) What is runlevels in linu
 https://www.liquidweb.com/kb/linux-runlevels-explained/

