* History of DevOps

Before DevOps, We had two approaches for software development namely the Waterfall and the Agile.
** Waterfall Model
*** Top-down approch
**** Introduction
https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2019/06/Waterfall-Phases-403x300.png
The waterfall model is a software development model that is pretty straight forward and linear. This model follows a top-down approach.
**** > Requirement Gathering and Analysis[Client + Developers]
This model starting with *Requirements gathering and analysis*. In this phase we  get the requirements from the client for developing an application. After this, you try to analyze these requirements.And make a blueprint of software
**** > Design[Developers +..  ]
The next phase is the Design phase where you prepare a blueprint of the software. Here, you think about how the software is actually going to look like.

**** > Implementation[Developers]
Once the design is ready, you move further to Implementation phase where you begin with the coding for the application. The team of developers works together on various components of the application.
**** > Testing[Testers]
Once you complete the application development, you test it in the *Verification phase*. There are various tests conducted on the application such as unit testing, integration testing, performance testing, etc.
**** > Depolyment [Developers + Testers]
After all the tests on the application are completed, it is *deployed* onto the production servers.
**** > maintenance phase[Operator]
At last, comes the *Maintenance phase*. In this phase, the application is monitored for performance. Any issues related to the performance of the application are resolved in this phase.

*** Advantages of the Waterfall Model:
- Simple to understand and use
- Allows for easy testing and analysis
- Saves a significant amount of time and money
- Good for small projects if all requirements are clearly defined
- Allows for departmentalization & managerial control
*** Disadvantages of Waterfall Model:
- Risky and uncertain
- Lack of visibility of the current progress
- Not suitable when the requirements keep changing
- Difficult to make changes to the product when it is in the testing phase
- The end product is available only at the end of the cycle
- Not suitable for large and complex projects

** Agile Methodology
https://www.hashminds.com/wp-content/uploads/2018/01/agile3-e1516054093712.jpg
Agile Methodology is an iterative based software development approach where the software project is broken down into various iterations or sprints. Each iteration has phases like the waterfall model such as Requirements Gathering, Design, Development, Testing, and Maintenance. The duration of each iteration is generally 2-8 weeks.
*** model Agile Process
- In Agile, a company releases the application with some high priority features in the first iteration.
- After its release, the end-users or the customers give you feedback about the performance of the application.
- Then you make the necessary changes into the application along with some new features and the application is again released which is the second iteration.
- You repeat this entire procedure until you achieve the desired software quality.
**** Advantages of Agile Model
- It adaptively responds to requirement changes favorably
- Fixing errors early in the development process makes this process more cost-effective
- Improves the quality of the product and makes it highly error-free
- Allows for direct communication between people involved in software project
- Highly suitable for large & long-term projects
- Minimum resource requirements & very easy to manage

**** Disadvantages of Agile Model
- Highly dependent on clear customer requirements
- Quite Difficult to predict time and effort for larger projects
- Not suitable for complex projects
- Lacks documentation efficiency
- Increased maintainability risks

Now let us move on and discuss the DevOps stages and tools.
*** Diagram 
agile.png
** DevOps Stages and Tools
source : good explaination  https://dzone.com/articles/how-to-orchestrate-devops-tools-together-to-solve
As mentioned earlier, the various stages such as 
 - continuous development, 
 - continuous testing,
 - continuous integration, 
 - continuous deployment, and 
 - continuous monitoring 
constitute the DevOps Life cycle [[img] [https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/10/devops-explanation.png]]. Now let us have a look at each of the stages of DevOps life cycle one by one.

*** Stage – 1: Continuous Development
- Tools Used: Git, SVN, Mercurial, CVS and JIRA
- Process Flow: https://i.stack.imgur.com/UvZ0M.png
- This is the phase that involves ‘planning‘ and ‘coding‘ of the software. You decide the project vision during the planning phase and the developers begin developing the code for the application.
- There are no DevOps tools that are required for planning, but there are a number of tools for maintaining the code.
- The code can be in any language, but you maintain it by using Version Control tools. This process of maintaining the code is known as Source Code Management.
- After the code is developed, then you move to the Continuous Integration phase.

*** Stage – 2: Continuous Integration
- Tools: Jenkins, TeamCity, Travis 
- Process Flow:
- This stage is the core of the entire DevOps life cycle. It is a practice in which the developers require to commit changes to the source code more frequently. This may be either on a daily or weekly basis.
- You then build every commit and this allows early detection of problems if they are present. Building code not only involves compilation but it also includes code review, unit testing, integration testing, and packaging.
- The code supporting new functionality is continuously integrated with the existing code. Since there is a continuous development of software, you need to integrate the updated code continuously as well as smoothly with the systems to reflect changes to the end-users.
- In this stage, you use the tools for building/ packaging the code into an executable file so that you can forward it to the next phases.

*** Stage – 3: Continuous Testing

- Tools: Jenkins, Selenium TestNG, JUnit
- Process Flow:
- This is the stage where you test the developed software continuously for bugs using automation testing tools. These tools allow QAs to test multiple code-bases thoroughly in parallel to ensure that there are no flaws in the functionality. In this phase, you can use Docker Containers for simulating the test environment.
- Selenium is used for automation testing, and the reports are generated by TestNG. You can automate this entire testing phase with the help of a Continuous Integration tool called Jenkins.
- Suppose you have written a selenium code in Java to test your application. Now you can build this code using ant or maven. Once you build the code, you then test it for User Acceptance Testing (UAT). This entire process can be automated using Jenkins.

*** Stage – 4: Continuous Deployment

Tools Used: 
*** Stage – 5: Contionous monitoring 
* AWS EC2 installation
* Linux and Shell
Visit : Linux Tutorial for both Linux and Shell

* Vi Editor Tutorial
Visit : vim tutorial
* git
For creating a version control of local repository

We need to Create a version contol file (=.git=) it create by =git init=
There are Three Stages

** short tutorial
#+BEGIN_SRC sh
  git init                                  # Inicialize or Create a version control 
  git status                                # View the Stagging Area
  git add <file>                            # Add files to stagging Area
  git rim --cached <file>                   # Remove files in Stagging Area
  touch .gitignore                          #  list all files  that are need to ignore                    # Ignore files in Stagging Area
  git commit -m "fist commit"               # Save-Commit  to Local Repo
  git remote add orgin https://github.com/....                      # Connect Local Repo to Remote Repo
  git push origin master                    # Upload Local Repo to Remote Repo
  git pull                                  # Update Local Repo
  git clone https://github.com/...          # clone to current dir                    # Clone
  git diff                                  # diff : View changes in fiels

  ## Create and VC a branch :
  mkdir test                                # create local repository "test"
  cd test                                   # move to test folder
  git init                                  # create a new instance
  git branch <branch-name>                  #
  git branch --list                # list of branch 
  git push orign <branch-name>              # git Upload branch
  # git delete a branch in local repository 
  git branch -D devop
  # delete branch at remote repositort
  git push origin --delete <branch name>

  # Switch one branch to other
  git checkout <branch-name>
    # Merge
  # to go to destination (master)
  git chekout master


  # merge brach to existing git
 git merge <branch-name>
 
# rebase


#+END_SRC
** Version Control System
We can save multiple version is a single repository this  is centralised version where it set is stored in server or local host. 

- Distributed vcs
Each programmer will have there  local repository 
eg: git 

 
- architecture
- fork and clone
collaborations
branch, merge and rebase
commands 

** Installation and Configuration Cmd
#+BEGIN_SRC  sh
# installation

## setup

# version
git --version
# >> git version 2.3.2

# Configuration 
git config --global user.name "Dankarthik25"
git config -global user.email "dankarthik25@gmail.com"

# help
git help config
git config --help

#+END_SRC

** Version contol of program or local-repositore
*** Overview Creating a local Repository  
Consider 'Working-Dir' is need to Version Control 

- Git has three main states that your files can reside in: Working-Dir, Stagging Area, Commited: 
  - =Working-Dir=      File but have not have =Version Control= (committed)
    - Tell git  this dir need to (VC) it is done by =git init= which create =.git= file in dir 
    - Add Files         to Stagging area =git add file-name=
    - Remove Files from Stagging Area =git reset=
    - Ignore Files      to Stagging ara  =write (list of file that are to ignored) in  .gitignore= 
  - =Stagging Area=    Marked a modified file  which are to be commit.
    - Note :            All files in Working-Dir should be either add/ignore then only it can be commited
    - Commit File      =git commit=
  - =Committed=      Current files are commented/safed in local Repository =.git directory=.
    - The files are in VC are Know are Local Repository
  - =Remote Repository= 
    - To make a Remote Repository
      - Connet Local Repository to Remote Repository( =url=)
        - =git remote add origin url=
      - Push Local Repositoru to Remote Repository =git push= 
       - =git push origin master=
      - Pull Remote Repository to Local Repository =git pull=
*** How to Commit files ? 
**** initialize  the file or local-repository  (git init):()
Create a version control folder or =initialize= or track (changes or versions) we have to initialize the folder 
#+BEGIN_SRC sh
# go the directory (Local-Repositore) that has to be version control 
git init
#+END_SRC

This will create a =.git= file in the current directory  which consist of all the change that are to be done
**** Adding files to git (git add file)
files which are uncommited are changed to =staged= 
#+BEGIN_SRC sh
git add <file>             # add files to git
git add -A                     # add all file
git status                     # show <file> or all file are change to commited area
#+END_SRC
***** Example:
#+BEGIN_SRC sh
git add .gitignore
git add .emacs
git add .vimrc
#+END_SRC
 =.gitignore=  which was in untracked () is changed to staging area or committed
**** Removing files from git (git reset file)
#+BEGIN_SRC sh
git reset <file>                     # remove  files from stating area( committed)
git reset                                  # remove all files
#+END_SRC
**** .gitignore
hidden file =.gitignore=  contain the list of the all the file and folder that ignore by git for version control
#+BEGIN_SRC sh
touch .gitignore
ls -a >> .gitigonre	# and remove the files need to be VC
#+END_SRC
***** Example
in file add the file or folders that are to ignored by git
#+BEGIN_SRC sh
# file that are to ignore
.DS_Store
.project
*.pyc
#+END_SRC
**** Commit files (git commit)
Note : All files are need to to add/ignored then only we can commit files
#+BEGIN_SRC sh
  git add -A
  git commit -m "Initial Commit"                        # file are commited 
  git status                                                                  # show nothing to commit , working directoru clean    
#+END_SRC
*** Connect Local Repository to Remote Repository
  #+BEGIN_SRC sh
git remote add origin url    # eg: git remote add origin https://github.com/dankarthik25/pythonUdemyTutorial  
  #+END_SRC
*** Push Local Repository to Remote Repository (git push)
#+BEGIN_SRC sh
git push origin master
# git push origin master -f     # Force if cmd not works
#+END_SRC
*** TODO Pull Remote Repository to Local Repository
#+BEGIN_SRC sh
git pull
#+END_SRC
*** Creating a Branch (git branch <branch-name>)
source : https://nvie.com/posts/a-successful-git-branching-model/ 
#+BEGIN_SRC sh
git branch UncleDaveEmacs       # Create a branch
git checkout UncleDaveEmacs        # If you move to different branch then you Current Dir will change to files that contain Branch Files

# to create and moveing to the <branch-name>
git chechout -b <branchname>


# Do the changes in Working Dir 
git status                         # check status  and add,ignore that are need to be done
git commit -m 'Emacs Configuration of Uncle Dave '
git push -u origin UncleDavesEmacs

# show branchs
git branch
git branch --list

# delete a branch 
git branch -D UncleDaveEmacs

# delete a branch in remote repository
git push origin --delete UncleDaveEmacs

#+END_SRC

**** Example for branching
#+BEGIN_SRC sh
git pull  # synchronize with remote repo

git branch --list # list of branch
git branch devop # cretae devop branch

git chechout devop # move to devop branch

touch kk
git add .
git commit -m "created kk file in devops"

git push origin devops
#+END_SRC
*** merge
#+BEGIN_SRC sh
# to git <branch-name>
git checkout master

# git merge <other-branch-name>
git merge devop

##  Example 

# create nn file in "devop"  branch
git checkout devop
touch nn
git add .
git commit -m "created nn file"
git push  origin devop

# merge "devop" branch to  "master branch"
git chekchout master

#+END_SRC
*** log
Consist of < commit id, Author, Date, Comment on commit > 
 mode on your branch
#+BEGIN_SRC sh 
git log 

git log --online # give short version only < commit id, comment >
#+END_SRC
*** revert :
when code is pushed to remote but you want changes back from remote > local 
#+BEGIN_SRC sh
git log --oneline # to get the commit id

git revert 77592f3   # to change code frome to remote to local repo

# to change the code from local to remote we need to push from local to remote

git push origin master


#+END_SRC

*** Clonning a repository
#+BEGIN_SRC sh
git clone <url> <path- which dir>
git clone ../remote_repo.git .
git clone <url> .                        # . means current direcory
#+END_SRC

** Pull vs fetch

fetch : it's hold the data  and it need to  merged  in repo

pull : = git fetch + git merg
#+BEGIN_SRC sh
# fetch hold data(fetch data from remote  repository to local repository)  r  but not merges with current reposiotory
git fetch

# it merges local repository to current repository 
git merge

 
# pull
git pull origin <branch-name>

#+END_SRC
** reset vs revert
there are 3 stagge in repository in git
working copy > staging  > local > remote

git reset : is used go backworkd for local to staging 

reset : local repo to  stageing  to working copy
- reset are   3 types
  - git reset --soft 
  - git reset --mixed
  - git reset --hard
#+BEGIN_SRC sh
git reset --hard 77592f3
git reset --soft 77592f3
git reset --mixed 77592f3
#+END_SRC
** merge vs rebase vs cherrypick 
For merge : new <commit id>  will be create and add <branch> <commit id > to which branch it is prescent
For rebase : it chaganes history(log file) or add history
For cherry-pick add particular <commit -id>
#+BEGIN_SRC sh
git checkout master
touch aaa
git add aaa
git commit -m "created aaa file in master"

git checkhout -b "release-1.0"
git rebase master 

#+END_SRC

*** cheery pik
#+BEGIN_SRC sh
git checkout -b future
touch ww
git add .
git commit -m "create ww file"
touch ww

touch www
git add .
git commit - m "create www file"


touch wwww
git add
git commit - m "create wwww file"

touch wwwww | git add .
git commit -m "create wwwww file"

git log --online 

# Q) merge only www file from future brach to master
git log --online # to get the <commit -id> of www file : b877590

git checkout master

git cherry-pick b877590

#+END_SRC
** conflicts
When two branch <kar> <sanjay> make different change in a same file 
#+BEGIN_SRC sh
git checkout master
vi ww
# hello

git add  .
git commit -m "modified ww file"

git log 

git checkout future
vi ww
# hello,
# book ticktes

git commit -m "modifiled ww file"

git checkout master

git merge future 
#ERROR mESSAGE: CONFLICT (content): merge confilct in ww
#             : fix conflicts and then commit the results
vi ww

#+END_SRC

** Interview Qusestion
- Q)If branch and merge, and pull and push  are done my devops then what is role of devops 
- Ans) devops role is to create hotfix branch and and set a maile to devops  
** stash

* Github
version control 
sharing code
* maven
maven is a java based build tool and it is use to create artifacts like jar, war,ear

Build server: 
Build server job is take the code from git and build artifact
(war web archive, 
 jar java archive, 
 ear enterprise ) 

Requirement: java  is required  since maven is java complied


#+BEGIN_SRC sh
mvn archetype:generate # Need 3 input : group Id, version, artifact Id
#+END_SRC


** using wget and extracting and install
#+BEGIN_SRC sh
# Download maven in /temp using wget
wget https://www-us.apache.org/dist/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz -P /tmp
 # extract the archive to /opt directory
sudo tar xf /tmp/apache-maven-*.tar.gz -C /opt
#  more control over maven version and update we will create a symbolic link<maven> that will point to maven installation directory
sudo ln -s /opt/apache-maven-3.6.0 /opt/maven
#+END_SRC
https://linuxize.com/post/how-to-install-apache-maven-on-ubuntu-18-04/

*** Setup environment variable
#+BEGIN_SRC sh
# Open mavenenv.sh in /etc/profile.d dir
sudo nano /etc/profile.d/maven.sh

# add environment variables
export JAVA_HOME=/usr/lib/jvm/default-java
export M2_HOME=/opt/maven
export MAVEN_HOME=/opt/maven
export PATH=${M2_HOME}/bin:${PATH}
# save and close the file 

# change mod of maven to execute
sudo chmod +x /etc/profile.d/maven.sh

# load the environment variable using source command
source /etc/profile.d/maven.sh

# verify the installation
mvn -version
#+END_SRC

** Create maven project
#+BEGIN_SRC sh
cd /Workspace/Devops # Directory for maven project here pom.xml file

mvn archetype:generate -DgroupId=world -DartifactId=india -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
# [INFO] ----------------------------------------------------------------------------
# [INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-webapp:1.0
# [INFO] ----------------------------------------------------------------------------
# [INFO] Parameter: basedir, Value: /home/jayradhe/Workspace/Devops
# [INFO] Parameter: package, Value: world
# [INFO] Parameter: groupId, Value: world
# [INFO] Parameter: artifactId, Value: india
# [INFO] Parameter: packageName, Value: world
# [INFO] Parameter: version, Value: 1.0-SNAPSHOT
# [INFO] project created from Old (1.x) Archetype in dir: /home/jayradhe/Workspace/Devops/india
# [INFO] ------------------------------------------------------------------------
pwd
# ~/Workspace/Devops
ls
# india |- src    # india : ArtifactId
#       |-pom.xml 

 # Developers put there code in and push it to github
# artifact_Id/src/main/java/group_Id

# Pull the code and build artifact
maven comple
maven package
maven install
maven deploy

#+END_SRC

Q)Who create src file and pom.xml file ?
maven create src dir and pom.xml 
maven is a project management tool and we need 3 argument: group Id, Artifact Id, Version

Q)For running maven cmd (compile,package,install,deploy)  why it should present in the same directory where pom.xml is present

** TODO maven life cycle [Need to visit : javatpoint.com maven-life-cycle: 8items=> validate,test ]
compile : want to compile
package : want to create a package
install : copy to local repos (.m2)   # create a .war file
deploy  : deploy to (remote repo) 

#+BEGIN_SRC sh
# hello.java 
hello.class -compile -mvn compile #
# TO create a package 
mvn package
#+END_SRC

*** Question and Answers
Q) Why it is called maven life cycle ?
Ex if we need to run install : we need to go step by step like compile, package, install

Q) What is difference between Snapshot and Version ?
Snapshot : For every realased snapshot is increased or updated.
But version is different it not updated or increased for every deployment but for final-deployment Version is updated.


Q) What is actually pom.xml  file
- Consist of 
   group Id, 
   artifact Id, 
   version
   dependency-links
- Link to remote repository 

Q) What is maven archtype:generate ?
It is a maven plugin use to generate src and pom.xml file



*** Step in how to build artifact in organisation

- Step 1: OPS : Create git repo and send to all dev
- Step 2: DEV : clone the repo
- Step 3: DEV : push code into github (contain src and pom.xml in github)
- Step 4: OPS : clone the repo
- Step 5: OPS : Build artifacts (war file: mvn package)
- Step 6: OPS : push(scp) war file  to dev,sit,preproduct, prod servers

#+BEGIN_QUOTE
- Developers will create maven file and in src file they will uploade developer code and push code to github
- OR
- Developerss will 1st create a maven project and then it will write the code then they will version control (git) and upload them th remote repository (github)


*Note* :For Continous Testing & Deployment:  We need to deploy the artifacts to different envirnoment (development, sit (System Integration and Testing),uat (User Acceptance Testing),prod)

#+END_QUOTE

#+BEGIN_SRC sh
mvn archetype:generate -DgroupId=world -DartifactId=india -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false

#tree -L 1
#LG
#|- india/
#|     |-  src/
#|     |-  pom.xml
#|
#|- READ.md



#- Step 1: OPS : Create git repo and send to all dev
#- Step 2: DEV : clone the repo
#- Step 3: DEV : push code into github (contain src and pom.xml in github)
# Above all code is writen by developers with devops are also present
git add india
git commit -m "created mvn project"
git push origin master

#
#  How to create war file for github
#
git clone https://github.com/kliakos/sparkjava-war-example.git
cd sparkjava-war-example

#- Step 5: OPS : Build artifacts (war file: mvn package)
mvn install  # will create a war file 


#+END_SRC

#+BEGIN_SRC sh
#!/bin/bash

#- Step 6: OPS : push(scp) war file  to dev,sit,preproduct, prod servers

src=india/target/web.war
dest=/opt/
env=$1
if [$env=='sit']
then
   scp $src@192.124.24.5:$dest
fi

#+END_SRC
** maven repository

# maven has three repose
# 1.Local Repo (dir by name .m2 )
# 2.Central Repo (Internet)
# 3.Remote Repo

# Why we need repo ? we run 
# mvn archetype:generate >>> it search for all dependency in local then central,last remote repo

# Remote repo is custome repo like personal details (salary, bank  balance,how much loan taken ....etc)
# remote repo consist of custome (war,jar) file we store in remote repo


* Servers (Tomcat) 
Server contains: 
  - Start and shutdown programs (irctc ticket booking at night 12am)
  - Can be supported to run war or ear files continously
     Ex: sbi.war is copied in to server then sbi site is opend

Type of Servers
 - Webservers - Eg: apache tomcat 
    -  it can be supported only war file it wont support ear files
 - Application Servers : jboss
   - it can be supported  ear file
 - Cluser: 
   - web logics
   - group of servers
   - support ear files  



# By default tomcat server is 8080 
# We can change server in conf/server.xml - conncetor port
# After starting if there is some error then check log file

we are using tomcat 9 server there is 10 but 10 is alpha and 9 is stable version


** installation
https://www.youtube.com/watch?v=Feui5F42bII
#+BEGIN_SRC sh
# cd Workspace/Devops/tomcat # directory where tomcat is install 
# get link for tomcat 9 tar file
wget https://mirrors.estointernet.in/apache/tomcat/tomcat-9/v9.0.31/bin/apache-tomcat-9.0.31.tar.gz


# extract tar file
tar -xvzf apache-tomcat-9.0.31.tar.gz

# install java file # /software/jdk1.8.0_131
vi ~/.bashrc

# insert below text
# JAVA ENVIRONmENT VARIABLES
export CATALINA_HOME=/Workspace/Devops/tomcat
# export JAVA_HOME=/Workspace/Devops/tomcat/bin

# run bash
source ~/.bash_profile

cd Workspace/Devops/tomcat
sh startup.sh

# Run tomcat server
sh /home/jayradhe/Workspace/Devops/apache-tomcat-9.0.31/bin/startup.sh

# Stop tomcat server
sh /home/jayradhe/Workspace/Devops/apache-tomcat-9.0.31/bin/shutdown.sh


## Create symbolic link 
#ln -s /opt/tomcat/apache-tomcat-9.0.31/bin/startup.sh /usr/local/bin/tomcatup
#ln -s /opt/tomcat/apache-tomcat-9.0.31/bin/shutdown.sh /usr/local/bin/tomcatdown

## To start tomcat as root anywhere in shell
#tomcatup
## To stop tomcat
#tomcatdown


firefox localhost:8080 # By default tomcat server is 8080 
# We can change server in conf/server.xml - conncetor port
# After starting if there is some error then check log file
#+END_SRC
** Change Port Number
*** Tomcat File system
#+BEGIN_SRC sh
Tomcat
├── bin  # executable file : start up and shutdown
├── conf # server.xml : change config 
|     └──server.xml # like port by default port is  :8080
├── log    
└── webapps 
      └── sbi.war 
#+END_SRC
*** Edit server.xml 
#+BEGIN_SRC sh
cat server.xml
######################################################
# Change port :8080 
#+END_SRC
** install using apt-get 
https://www.youtube.com/watch?v=26ipmonPmRw
#+BEGIN_SRC sh
sudo apt-get install tomcat9-docs
sudo apt-get install tomcat9-examples
sudo apt-get install tomcat9-admin
sudo start tomcat9
sudo status tomcat9
sudo service tomcat9 stop
sudo status tomcat9
#+END_SRC

** Deployment process

Deployment Process
- Stop the server process
- take required backups sbi.war-> sbi.war'data'.zip
- Deploy sbi.war(build server (scp * .war $user@$ip :opt/apache-tomcat-9.0.16/webapps/*.war )
  - Deployed to dev,sat,uat,pre-production,production
- start the server
- check it in web browser

** Example 
SampleWebApp.war file
https://www.middlewareinventory.com/blog/sample-web-application-war-file-download/
#+BEGIN_SRC sh
# download  or SampleWebApp.war file to tomcat/webapps dir # 
# /home/jayradhe/Workspace/Devops/apache-tomcat-9.0.31/webapps


#+END_SRC

** Example 2
https://github.com/kliakos/sparkjava-war-example

#+BEGIN_SRC sh 
# get clone to local repository
# cd /home/jayradhe/Workspace/Devops # local repository
git clone https://github.com/kliakos/sparkjava-war-example.git

#+END_SRC
** TODO Deploy war file to tomcat
#+BEGIN_SRC sh
#!/bin/bash
env=$1
if[$env=='dev']
then 
scp sbi.war dev@192.145.67.8: tomcat/webapps
fi

#+END_SRC
** How to Deploy (automate) git code to tomcat server  [029 Udemy Lecture]
- Steps required
  - Configure Tomcat or Create User for remote acess
  - Create Job to Produce Tomcat Deployable Artifacts
  - Install "Copy Artifact" & "Deploy to Containers" Plugins
  - Create Job to Deploy Artifacts to Tomcat server or(Staging Env).
*** Configure Jenkins with Tomcat for Auto Deployment of Artifacts.
#+BEGIN_SRC sh
cd /opt/tomcat/conf
# update tomcat-users.xml file
# roles : manger-script & manger-gui
# Set password:tomcat

#  <role rolename="manager-script"/>
#  <role rolename="manager-gui"/>
#  <user username="tomcat" password="tomcat" roles="manager-script,admin-gui" />
#</tomcat-users>


# Restart the tomcat server
/opt/tomcat/bin/shutdown.sh
/opt/tomcat/bin/startup.sh

#+END_SRC
*** Create Job to Produce Tomcat Deployable Artifacts
Create a view :
View Name : _TomcatDeploy_View_
List View : select

Inside "TomcatDeploy_View" Create a New JOB   :
New item > Name _Package_Application_
Genral :        
    Description: This Job is Packaging Java-Tomcat-Sample Project  and Create war file
    Discard Old Build: 5 days and 5 builds
Source Code management:
    git :https://github.com/anshulc55/Jenkins_Upgradev3.git 

Build Trigger :
    Poll SCm: * * * * *
Build: _Invoke top-level maven target_
    pom : _location of pox.xml_

Post-build Action : _Archive the artifacts_
    Files to archive : _**/*.war_

Post-build Action : _Build Other Project_
    Project to build : _Depoly Application Staging Env_ (Below Stage Job Name)
    Trigger only if build is stable : Ok
Save Job
*** Create Job to Deploy Artifacts to Tomcat server or(Staging Env)
Step 1:  Install "Copy Artifact" & "Deploy to Containers" Plugins
Step 2:
New item > Name : _Depoly Application Staging Env_
           FreeStyle
Genreal:
     Description : This Will Deploy the Java_Tomcat_sample in Staging Enviroment
     Discard Old Build : 5 days , 5 build
Build:
     _Copy Artifacts from Another Project_
     Project Name :  _Package_Application_   (Project Name for above Prj)
     Artifacts to Copy :  _**/*war_

Post-build Action
   _Deploy war/ear to a container_
    War/Ear files : _**/*.war_ 
    Context Path : _/_
    Containers : _Tomcat 9_
    Credentials : Add credentials 
             Username : tomcat
             Password : tomcat (For configuration we set)
    Tomcat Url : Same page url.
       

* Jenkins 
- Jenkins 
  - installation
  - how to create jobs
  - checkout git
  - goal package
  - send a mail
  - archive powershell scripts
  - execute powershell scripts
  - permission 
  - upstream and downstream - 
  - pipeline(build)
  - master-slave 
  - dependencies
  - distribution
  - Countious Integration (CI)
  - Countious Development
  - backup
  - build triggers (poll SCm)
    
** installation
- Jenkins can be install in 3 ways
  - 1. using executal file (unzip and install)
  - 2. using java    (java -jar jenkins.war)
  - 3. inside tomcat (jenkins.war files) 
    - install tomcat then copy jenkins.war to tomcat/webapps
    - run tomcat start and open https://localhost:8080/jenkins
*** Using zip file
#+BEGIN_SRC sh
# Install java(jenkins is java 8 app) so install openjdk
sudo apt update
sudo apt install openjdk-8-jdk
 
# add Jenkins debian repository 
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add - 
# above cmd  should output OK which means that the key has been successfully imported and packages from this repository will be considered trusted.

# add Jenkins repository to sys 
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'


# install jenkins
sudo apt update
sudo apt install jenkins # automatically run jenkins

# check running status of jenkins server 
systemctl stauts jenkins

# start jenkins
sudo systemctl start jenkins

sudo service jenkins restart
sudo service jenkins stop
sudo service jenkins start

# OR : alternate
sudo systemctl start jenkins.service
sudo systemctl stop jenkins.service
sudo systemctl restart jenkins.service

# Open Firewall
sudo ufw allow 8080

# set Wrokspace



# give administator password from : ..../Jenkins/secrets/initialAdminPassword file
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
# select <install suggested plugins>

# sign in to jenkins 
user     : admin
password : /Jenkins/secrets/initialAdminPassword

create user : dankarthik
passwrod : dankarthik
 
#+END_SRC
*** Install jenkins in tomcat
#+BEGIN_SRC sh
cd /opt/softwares/apache-tomcat-9.0.31/webapps
 
wget https://updates.jenkins-ci.org/download/war/2.204/jenkins.war

tomcatdown
tomcatup

#+END_SRC
*** Install using java
#+BEGIN_SRC sh
java -jar jenkins.war
java -jar jenkins.war --httpPort=9090
#+END_SRC
*** Configure  Port 
In case you want to change the default jenkins port on Linux,
You can go to /etc/default/jenkins  
add --httpPort=9999 or whatever port to JENKINS_ARGS
#+BEGIN_SRC sh
vi /etc/default/jenkins
# # port for HTTP connector (default 8080; disable with -1)
# HTTP_PORT=8080

#+END_SRC

** DONE Createing 1st job
Create 1st   


|-------------------+-------------------------------------|
| New Item          | Create a job or project             |
|-------------------+-------------------------------------|
| People            | User which are connected to Jenkins |
|-------------------+-------------------------------------|
| Build             | Build                               |
|-------------------+-------------------------------------|
| manage Jenkins    | manage                              |
|-------------------+-------------------------------------|
| my views          |                                     |
|-------------------+-------------------------------------|
| lockable resource |                                     |
|-------------------+-------------------------------------|
| credentials       | Create Credentials                  |
|-------------------+-------------------------------------|
| new view          |                                     |
|-------------------+-------------------------------------|

(menu)Jenkins > New Items > FreeStyles >  

- General 
  - Description
  - Discard odl builds : Remove  the old build
      - Days to keep builds    :__________
      - max # of build to keep :__________
  - GitHub Project 
      - give url for source code:________
  - TODO :Build requires lockable resource

  - Project is parametrized :
         : Project require agruments to be passed 
  - Throttle builds   # No.of Concurrent(parallel) build

      
- Source Code management
   Git : url_________ 
   Subversion:


- Build Triggers
   - Trigger Build remotely: using url or (Authentication Token)

   - Build after other project are build :

   - Build Periodically 
#+BEGIN_SRC sh
# * * * * * 
#+END_SRC  
    - Github hook for GIT_SCm Polling
    - Poll SCm
     
- Build Environment
  - Delete Workspace before build starts (discard old build result and start fresh build)
  - Use secret text or file
         - password protection
    - Abort build if it's stuck
    - Inspect build log for published Gradle build scans
- Build
   - Execute shell
   - Execute Powershell
   - 

- Post-build Actions
  - E-mail Notification
  - Editable Notification
  - Git Publisher
  - Set Github commit status
  - Delete workspace when build is done



Build a job
Double Click Project > Build Now


** DONE Plugis update, install, advance

** DONE Integrating with gmail
how to send an email to other ?
 - why should i share user and pwd to other client,middle-men, higher secured so we need to configure  and we send only log file to client,manager...etc
#+BEGIN_SRC
step1: 
manage jenkins - 
    configure system - 
       Extended email notification:
          SmTP server                  : smtp.gmail.com
          Default user E-mail suffix   : @gmail.com
          Use SmTP Authentication      : Check-Ok
          Username                     : sanjy@gmail.com
          passwd                       : 

          Use ssl                      : Check-Ok
          SmTP port                    : 456

       E-mail Notification:
          Test Configuration by sending test e-mail : Check-Ok
          Test e-mail recipient                     : omshiva003@gmail.com

step2: go to google account -> security-> on less security 
test:


go to job:
post build actions 
       editable email notification :
            Project From            : jenkins
            Project Recipient List  : cc:omshiva003@gmail.com
            Attach Build Log        : Attach Build Log
            Content Token Reference : Advance
                               Trigger : Always (Always form Add Trigger)
Save
Build now 

#+END_SRC
** TODO Permissions Add-Users Account (Role Based management) 
Steps :
- Install "Role-based Authorization Strategy"  Plugin
- Enable "Role-based Authorization Strategy"
- Create Users
- Install matrix based authentication Plugin
- Project based Plugin
#+BEGIN_SRC sh
  step 2: Enable Role-based Authorization Strategy

  Manage jenkins - 
      Configure Global Security - 
           Matrix based authentication: 
           Project based authentication: 
           Role-based Authorization Strategy : enable

  Step 3: Create Users

  Manage jenkins -
        Manage Users 
               Create Users
                    Username : sanjay
                    Password :
                    Confirm password:
                    Full name :
                    E-mail address:
              
                Create User
#+END_SRC

 Enable matrix based Security 
#+BEGIN_SRC sh
Step : Enable matrix based Security 
  Manage jenkins - 
      Configure Global Security -
           Matrix-based security : enable
                        |User/group        |  Over all      |  Credentials                                      |
                        +------------------+----------------+---------+--------+----------------+--------+------+
                        |User/group        |Adminster| Read |  Create | Delete | mangae Domains | Update | View | 
                        +------------------+---------+------+---------+--------+----------------+--------+------|
                        |Authenticated User|         |      |         |        |                |        |      |
                        +------------------+---------+------+---------+--------+----------------+--------+------|
                        |admin             |         |      |         |        |                |        |      |
                        +------------------+---------+------+---------+--------+----------------+--------+------|
                        |sanjay            |  check  |check |         |        |                |        | check|
                        +------------------+---------+------+---------+--------+----------------+--------+------|

                      Add user or group....
   
           Project-based Matrix Authorization Strategy : enable/disable


#+END_SRC
Project based
#+BEGIN_SRC sh
Step : Enable Project based Security 
  Manage jenkins - 
      Configure Global Security -
           Project based security : enable

New item > Name: Phani-Project >  Free Style Based

                General :
                       Enable Project based Security :
                        
                      Add user or group: sanjay, phani
#+END_SRC

Role Based 
#+BEGIN_QUOTE
  Manage jenkins - 
      Configure Global Security -
           Role Based  : enable

manage Jenkins 
      manage and assign roles
             manage roles :
                             create roles like manager (create,delete,build,
                                             , developer(read)
                                               testsers(read,write)


             assign roles :
                        |   User\role  | admin | manager | dev | test|
                        |   admin      |  Ok   |   X     |  X  |  X  |
                        |   phani      |  Ok   |   X     |  X  |  X  | 
                        |   sanjay     |  Ok   |   X     |  X  |  X  | 

             role strategy macros:

#+END_QUOTE

| manage role | dev     |
|-------------+---------|
| full        | R       |
| sanjay      | phani   |
| venkat      | sathish |
|             |         |


*** TODO Difference matrix-based Vs Project based Vs Role Based
matrix-based :  
project based: 
*** TODO LDAP 
manange role             dev
full                    R
sanjay                  phani
venkat                  sathish

yum isntall ldap

devopers - 4851,2458,9563,245697,24566,25665,
mangaer= 4582.31287,1258652
tester= 4521,324522
[/jenkins]
@devopers=r
@manager=rw
@tester=r

[\git]
@devopers=r
@manager=rw
@tester=r
*** TODO Active Directory
Install Active Directory Plugin
#+BEGIN_SRC sh
Manage jenkins - 
      Configure Global Security -
           Active Directory

                 Add Domain :

#+END_SRC 
** TODO Upstream and Downstream
There are diffrent job and jobs should be executive in order respectively
- world job
- india job
- hyd  job 
How do we auto-mate three jobs in order respectively
For World job , {india,hyd} job are downstream and World in upstream
#+BEGIN_QUOTE
Create world,india,hyd job 

Job : india job 
     Build Triggers :
         Projects to watch : world
                         Trigger only if build is stable
#+END_QUOTE
** master -slave :
https://www.youtube.com/watch?v=8dZKT79DUfk
copy D:\jenkins\worksape\sample\target\*.war D:\tomcat\webapps

Find tomcat installation folder
delete hello-world (Note : tomacat server is shutdown then delete)

AIm : directly paste helloworld.war or all war file using jenkins in windows(install powershell plugin )




install java,git, maven in linux aws- server

What is master -slave concepts ?
master ? where your cloud install jenkins
workspace : eg :/roor/.jenkins
            eg :D:/Workspace/jenkins/

consider master in Window and slave is aws-ec2-linux(jenkins is not install)

Aim : all master job should be done in slave (/opt/devops)

Step 1 : in slave (get ip address, key)
Step 2 : install (java, maven,git....etc) in slave
Step 3 : Create New Node(In Jenkins Node means Salve-server ) and Connect to Node to Jenkins  

*** INSTALL JAVA
#+BEGIN_SRC sh
# #####################################################
#   Java(1.8_0191,1.8_0131) installation in Linux# ####################################################
# dir to install software

sudo su-
mkdir sofwares

cd /opt/softwares


# install java- 8 (does not support higher version)
# updated for jdk 8u191
#wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;" "https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz"

# updated for jdk 8u131
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz"

# extract tar file
tar -xvzf jdk-8u131-linux-x64.tar.gz
rm -rf jdk-8u131-linux-x64.tar.gz

 # install java file # /software/jdk1.8.0_131
 vi ~/.bash_profile

# insert below text
# JAVA ENVIRONmENT VARIABLES
export JAVA_HOME=/opt/softwares/jdk1.8.0_131
export PATH=$PATH:/opt/softwares/jdk1.8.0_131/bin

# run bash
source ~/.bash_profile
java -version
#+END_SRC

*** INSTALL GIT AND maven
#+BEGIN_SRC sh
yum install git -y
#+END_SRC

*** INSTALL maven
#+BEGIN_SRC sh
cd /opt/softwares/

wget https://www-us.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz

vi ~/.bash_profile
#insert 
export M2_HOME=/opt/softwares/apache-maven-3.6.3
export PATH=$PATH:/opt/softwares/apache-maven-3.6.3/bin

# run bash_profile
source ~/.profile

mvn -version
#+END_SRC

*** Create and Connect Node(Slave-servet) to Jenkins(master- server)
Jenkins > manage Jenkins > mange Node(Slave) > New Node > 
> Node name : <Slave-Server Name>
> Permanaent Agent : enable
Fill Form 
Name, 
executors : 1
remote root directory : /opt/deploy/ # dir in slave server
label : orange
Launch method : Launch agents via SSH
   - Host Name : 18.188.173.210       
,  - Credentials : Jenkins
       - Kind : SSH Username with private key
       - Usernaem: ec2-user
       - Private key : enable
       - key : copy the key
Host Key Verification Strategy : Non verification Strategy

Node Progeries :

Toot Locations :
  - Name :  Java
  - Home : /opt/software/jdk1.8.0_131
  - Name : maven
  - Home : /opt/software/apache-maven-3.6.3/

BUG : if java, maven are not present then 
Jenkins > mangae Jenkins > Global Tool Configuratoin > JDK (Add JDK) , maver(Add maven)
manage jenkins > mange nodes
 
#+BEGIN_SRC sh
# install powershell
#+END_SRC

run as admin
start jenkins
** TODO Backup and Restoring point  
** Build Trigger
** Shell/Powershell  Scripts 

* TODO Continuous Deployment
* TODO Ansible :
*** Why Ansible:
Provisioning
Configuration management
Continous Delivery
Application Deployment
Security Compliance
Simple
Powerful
Agentless

*** SSH-Key connection between master and all slave 
**** Prerequirement-I : Create a common user with root privillage and ssh-key base authentication

- Step to connect using SSH-Key:  
 - Create common user for all users (master and slave))
 - Give root privilege to common-user for both master and slave
 - Enable ssh-key based authentication( and restart sshd server)
#+BEGIN_SRC sh
#!/bin/bash
USER_NAME='ansible'    # $1
PASSWORD='karthik@123'   #$USER_NAME

##################################################################################
#   Create a common user 
##################################################################################
useradd ${USER_NAME}
echo ${PASSWORD} | passwd --stdin ${USER_NAME}
passwd -e ${USER_NAME}

if [[ "${?}" -ne 0 ]]   # # if [ "#?" !=0]
then
  echo "Password create sucessfull"
else
      exit 1
fi
#check if user is created or not 
# cat/etc/passwd
##################################################################################
# Give root privilege
##################################################################################
if grep -q "${USER_NAME}" "/etc/sudoers"    #[[ "${?}" -ne 0 ]]
then
  echo "Alread exiting "
else
  echo "Need to add to sudoers"
  echo -e "## Allow ${USER_NAME} to run any commands anywhere\n${USER_NAME}\tALL=(ALL)\tNOPASSWD: ALL" >> /etc/sudoers
  # sed -i 's/root    ALL=(ALL)       ALL/root    ALL=(ALL)       ALL \n${USER_NAME}\tALL=(ALL)/g' /etc/sudoers
fi
grep "$USER_NAME" "/etc/sudoers"
##################################################################################
# Enable ssh-key based authentication
##################################################################################
sed -i 's/^PasswordAuthentication no/#PasswordAuthentication no/' /etc/ssh/sshd_config
sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
grep 'PasswordAuthentication' /etc/ssh/sshd_config
service sshd restart
#+END_SRC

**** Prerequirement-II: Generate ssh-key in master and share it with all slave  

 - Create ssh-key in master 
#+BEGIN_SRC sh
ssh-keygen   #check key "id_ras.pub" ls -latr /home/ansible/.ssh
ssh-copy-id devops@slave_ip
#+END_SRC

 - check ssh without password
#+BEGIN_SRC sh
ssh <user-name>@ip
# show-key : cat /home/<user-name>/devops/.ssh/authorizzed_keys
exit() # to exist 
#NOTE: we can connect from master to slave but not from slave to master
#+END_SRC

*** Using Virtual machine
*** Installation

#+BEGIN_SRC sh
wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
rpm -ivh epel-release-latest-7.noarch.rpm
yum repolist
#yum install epel-release
yum update
yum install git python openssl ansible -y
ansible --version

#+END_SRC
*** Introduction
*** Inventory: list of servers or host grouped together
PROS: 
Agent-less (No installation in slave host)

#+BEGIN_SRC sh
# Sample inventory files
web ansible_host=server1.company.com
db ansible_host=server2.company.com
mail ansible_host=server3.company.com
web2 ansible_host=server4.company.com

# #Inventory Parameters
# ansible_connection - ssh/winrm/localhost
# ansible_port -  22/5986
# ansible_user - root/administrator
# ansible_ssh_pass - Password

#
web ansible_host=server1.company.com ansible_connection=ssh
db ansible_host=server2.company.com ansible_ssh_pass=osboxes.org
mail ansible_host=server3.company.com ansible_ssh_pass=osboxes.org
web2 ansible_host=server4.company.com ansible_connection=ssh

#
#Ex:

localhost ansible_connection=localhost
#+END_SRC
**** Example
#+BEGIN_SRC sh
# /etc/ansible/host           # contain all information slave host in yaml file

#eg: Ansible has inventory files where host info are stored and used.
# inventory = /etc/ansible/host
#vi /etc/ansible/hosts   # System given examples

#[web]
# 192.147.58.9
#[app]
# 192.147.59.7
#[dbserevr]
# 192.34.5.6
# using host file we create cluster in order to run cmd on cluster we 

# Enable /etc/ansible/host by un-commenting <inventory> in ansible.cfg file
#vi /etc/ansible/ansible.cfg
#inventory = /etc/ansible/hosts

#+END_SRC
*** Ad-hoc commands
You could execute a quick one-liner cmd in ansible with-out writing playbook
#+BEGIN_SRC sh
ansible [groupname] -a "command"      # a : attributes

# Ex:
ansible test -a "ls -l /opt"
ansible test -a "cat /etc/passwd"
ansible servername -a "touch /opt/test123" -s
ansible servername -a "ls -l /opt"
ansible all -a "yum remove httpd -y" -s
ansible test -s -a "useradd batch31"
ansible all -a "ls -l /opt"

#+END_SRC

#+BEGIN_SRC sh










ansible-doc -l | wc
ansible-doc -s module-name

#+END_SRC
**** modules : Adhoc cmd are converted in module for simple and easy use
There different types of module  [[https://docs.ansible.com/ansible/latest/user_guide/modules_intro.html][Introduction to module]]

Modules (also referred to as “task plugins” or “library plugins”) are discrete units of code that can be used from the command line or in a playbook task. Ansible executes each module, usually on the remote target node, and collects return values.
#+BEGIN_SRC sh
# 
ansible [pattern] -m [module-name] -a "[module-option]"
# pattern : group or cluster in inventory file

# -a      : attributes of module
# -m      : module
# $ansible-doc -l |wc
#$ ansible-doc yum
#$ ansible-doc yum 
# Example: # state=latest or present, absent(remove install)
# ansible 
ansible web -m yum -a "name=httpd state=latest"# ################################
#                yml file
# ##############################
- name: install latest version of Apache
  yum:
    name: httpd
    state: latest

#############################################
#$ ansible-doc service   
# Example: state : started, stopped,restarted
ansible web -m service -a "name=httpd state=started" --become # install apache server

#                yml file
- name: start service hhtpd
  service:
    name: httpd
    state: started
##################################

ansible web -a "service httpd status" --become 
ansible web -m yum -a "name=httpd state=stopped" --become
#
ansible web -m yum -a "name=httpd state=absent"# uninstall httpd(apache)

# #############################################
#  Create users
# #############################################
# Encrpt password :https://www.radb.net/crypt_calculator 
ansible all -m user -a"name=test password=cFl0NSByhlhXc" --become
ansible all -a"cat /etc/passwd" --become # check user is created

# #########################################
#  Custom inventory file
##########################################
#path of inventory file path: /opt/hosts
ansible -i /opt/hosts app -a "ls -latr /opt"
ansible -i /opt/hosts app -a "ping"
ansible -i /opt/host -m yum -a "name=git state=latest"#
ansible -i /opt/host -m yum -a "name=tomcat state=latest"#
#+END_SRC
***** Example
#+BEGIN_SRC sh
ansible webserver -m yum -a "name=git state=latest"

ansible all -m yum -a "name=httpd state=latest"

ansible test -m ping

ansible all -m copy -a "src=/opt/docker-compose.yaml dest=/opt" -s

ansible appserver -m yum -s -a "name=httpd state=present"

ansible all -m yum -s -a "name=httpd state=absent"

ansible all -m yum -s -a "name=git state=latest"

ansible test -m user -s -a "name=batch31"

ansible test -m user -s -a "name=batch31 state=absent"

ansible all -m service -s -a "name=httpd state=started"


#+END_SRC
**** Playbook(.yaml)
module: to run single tast or one time task

To run multiple task , run repeted task

https://www.softwaretestinghelp.com/ansible-playbooks-ansible-vaults/

to get yaml formate example:
yml consist of ( hosts,variable,tasks) and task is array 

variable: optional 
task contain : module and attributes informations

#+BEGIN_SRC sh
ansible-doc git
#+END_SRC

***** Command type playbook
#+BEGIN_SRC sh
#cat sample.yml
##################################
---
- hosts: app
  become: true
  tasks:
  - name: install python
    yum:
      name: python
      state: latest
##########################################
ansible-playbook sample.yml --syntax-check
ansible-playbook sample.yml --list-hosts
ansible-playbook sample.yml # to run yml file


#cat useradd.yml
##################################
---
- hosts: app
  become: true
  tasks:
  - name: creating user
    yum:
      name: statish
      state: /pL2AYR6csdTI
ansible-playbook useradd.yml --syntax-check
ansible-playbook useradd.yml 
ansible app -a "cat /etc/passwrd" --become
##########################################
#cat httpd_installNrun.yml
##################################
---
- hosts: app
  become: true
  tasks:
  - name: install httpd
     yum:
       name: httpd
       state: latest
  - name:start service
     service:
        name: httpd
        state: started
ansible-playbook httpd_installNrun.yml --syntax-check
ansible-playbook httpd_installNrun.yml
##########################################
#cat create_file.yml
##################################
---
- hosts: app
  tasks:
  - name: create file
     file:
      path: /opt/vbs
       state: touch
ansible-playbook create_file.yml --syntax-check
ansible-playbook create_file.yml

#+END_SRC

*** modules
- modules
  - System (User, Group, Hostname, Iptables, Lvg, Lvol, make, mount,ping, Timezone, Systemd, Service)
  - Commands (Command, Expect , RAW, Script, Shell)
  - Files (Acl, Archive, File, Find, Lineinfile, Replace, Stat, Template, Unarchive)
  - Database(mongodb,mssql,mysql, Postgresql, Proxysql, vertica)
  - Cloud (Amazon, Atomic, Azure, Centrylink,Cloudscale,Cloudstack,Digital Ocean, Docker,Google, Linode, Openstack, Rackspace, Smartos, Softlayer, Vmware)
  - Windows (In windows environment)
  - git ()
  - .....
  - 
  - shell
  - command
  - script
#+BEGIN_SRC sh
-
 name: Play 1
 hosts: localhost
 tasks:
 - name: Execute command ‘date’
   command: date

 - name: Display resolv.conf contents
   command: cat /etc/resolv.conf

 - name: Display resolv.conf contents
   command: cat resolv.conf chdir=/etc

 - name: Display resolv.conf contents
   command: mkdir /folder creates=/folder

 - name: Copy file from source to destination
   copy: src=/source_file dest=/destination

 - name: Run a script on remote server
   script: /some/local/script.sh -arg1 -arg2
# Services : Started,Stopped,Resatared
 - name: Start the database service
   service: name=postgresql state=started

 - name: Start the httpd service
   service: name=httpd state=started

 - name: Start the nginx service
   service:
     name: nginx
     state: started
 - name: Start the database service
   service:
     name: postgresql
     state: started
# Lineinfile
# Search for a line in a file and replace it or add it if it doesn’t exist.
- lineinfile:
    path: /etc/resolv.conf
    line: 'nameserver 10.1.250.10'
# Ping
  - name: Ping test
    ping:

#+END_SRC
*** Playbook for file-module 
Basic yml to be remember during interviews
https://www.softwaretestinghelp.com/ansible-playbooks-ansible-vaults/

#+BEGIN_SRC sh
# $ansible-doc file # go to example

- name: Create a directory if it does not exist
  file:
    path: /etc/some_directory
    state: directory
    mode: '0755'


- name: Remove file (delete file)
  file:
    path: /etc/foo.txt
    state: absent

- name: Recursively remove directory
  file:
    path: /etc/foo
    state: absent


- name: Change file ownership, group and permissions
  file:
    path: /etc/foo.conf
    owner: foo
    group: foo
    mode: '0644'

- name: Change file ownership, group and permissions
  file:
    path: /etc/foo.conf
    owner: foo
    group: foo
    mode: '0644'

- name: Change file ownership, group and permissions
  file:
    path: /etc/foo.conf
    owner: foo
    group: foo
    mode: '0644'

#+END_SRC

#+BEGIN_SRC sh
cd /opt
#vi dry.yml
---
- hosts: web
  become: true
  task:
  - name: create dir
    file:
      path: /opt/test_dir
      state: directory
      mode: '0755'
  - name: change permission and ownership
    file:
      path: /opt/test_dir
      owner: ansible
      group: ansible
      mode: '0777'
  - name: create touch
    file:
      path: /opt/test.txt
      state: touch
      mode: '0755'
  - name: create multiple touch
    file:
      path: "{{item}}"
      state: touch
      mode: '0755'
    with_item:
      - "/opt/satishP"
      - "/opt/satishT"
      - "/opt/rajit"
      - "/opt/karthik"

  - name: Remove file (delete file)
    file:
      path: /opt/test.txt
      state: absent
  - name: Recursively remove directory
    file:
      path: /opt/etc/foo
      state: absent
    
...
#+END_SRC
*** Palybook service (state: reloaded, restarted, started, stopped)
#+BEGIN_SRC sh
 - name: start serveice
   service:
      name: httpd
      state: started # reloaded, restarted, started, stopped

#+END_SRC
*** Palybook copy-module
#+BEGIN_SRC sh
#$ansible-doc copy
- name: Copy file with owner and permissions
  copy:
    src: /srv/myfiles/foo.conf
    dest: /etc/foo.conf
- name: Copy a new "sudoers" file into place, after passing validation with visudo
  copy:
    src: /mine/sudoers
    dest: /etc/sudoers
    validate: /usr/sbin/visudo -csf %s

#+END_SRC

#+BEGIN_SRC sh
cd /opt
#vi copy_pb.yml
---
- hosts: web
  task:
  - name: copy file
    copy:
      src: /opt/sbi.war
      dest: /tmp/sbi.war
...
# #########################333
#   Using SRC
# #########################3
- hosts: web
  become:true
  vars:
    dst_path: /opt
    src_path: /opt/icici.war
  task:
  - name: copy file
    copy:
      src: "{{src_path}}"
      dest: "{{dst_path}}"
...
#+END_SRC
*** Varaible
#+BEGIN_SRC sh
-
 name: Add DNS server to resolv.conf
 hosts: localhost
 vars:
   dns_server: 10.1.250.10
 tasks:
 - lineinfile:
     path: /etc/resolv.conf
     line: 'nameserver {{dns_server }}’
#+END_SRC

#+BEGIN_SRC sh
- 
  name: Set Firewall Configurations
  hosts: web
  var:
    http_port: 8081
    snmp_port: 161-162
    inter_ip_range: 192.0.2.0
  tasks:
  - firewalld:
      service: https
      permanent: true
      state: enabled

  - firewalld:
      port: ‘{{ http_port }}’/tcp
      permanent: true
      state: disabled
  - firewalld:
      port: ‘{{snmp_port}}’/udp
      permanent: true
      state: disabled
  - firewalld: 
      source: ‘{{ inter_ip_range}}’/24
      Zone: internal
      state: enabled
#+END_SRC
*** Looping
#+BEGIN_SRC sh
-
  name: Create users
  hosts: localhost
  tasks:
  - user: name= ‘{{ item }}’
    loop:
      - joe
      - george
      - ravi
      - mani
      - kiran
      - jazlan
      - emaan
      - mazin
      - izaan
      - mike
      - menaal
      - shoeb
      - rani
#+END_SRC

#+BEGIN_SRC sh
- 
  name: Create users
  hosts: localhost
  tasks:
  - user: 
      name= ‘{{item.name}}’  
      state= present
      uid= '{{ item.uid}}’

    loop:
     - name: joe
       uid: 1010
     - name: george
       uid: 1010 
     - name :ravi
       uid: 1012
     - name:mani
       uid: 1013
     - name:kiran
       uid: 1014
     - name:jazlan
       uid: 1015
     - name:emaan
       uid: 1016
     - name:mazin
       uid: 1017
     - name:izaan 
     - name:kiran
       uid: 1018
     - name:mike 
#+END_SRC
**** With_item
#+BEGIN_SRC sh
- name: Create users 
  hosts: localhost 
  task: 
  - user: name='{{ item }}'
    state: present 
    with_item: 
    - joe 
    - george 
    - ravi 
    - mani
#+END_SRC


**** With_file
#+BEGIN_SRC sh
- name: Create users 
  hosts: localhost 
  task: 
  - debug: var=item
    with_file: 
    - "/etc/hosts"
    - "/etc/resolve.conf"
    - "/etc/ntp.conf"
#+END_SRC
**** With url
#+BEGIN_SRC sh
- name: get multiple urls
  hosts: localhost 
  task: 
  - debug: var=item
    with_url: 
    - "https://site1.com/get-servers"
    - "https://site2.com/get-servers"
    - "https://site3.com/get-servers"
    - "https://site4.com/get-servers"
#+END_SRC
**** With mongodb:
#+BEGIN_SRC sh
- name: get multiple mongodbs
  hosts: localhost 
  task: 
  - debug: msg "DB={{item.database}} PID={{item.pid}}"
    with_url: 
    - database: dev
      connection_string : "mongodb://dev.mongo/"
    - database: dev
      connection_string : "mongodb://prod.mongo/"

#+END_SRC
**** With_*
#+BEGIN_QUOTE
with_items
with_file
with_url
with_mongodb
with_dict
with_etcd
with_env
with_filetree
With_ini
With_inventory_hostnames
With_k8s
With_manifold
With_nested
With_nios
With_openshift
With_password
With_pipe
With_rabbitmq
With_redis
With_sequence
With_skydive
With_subelements
With_template
With_together
With_varnames
#+END_QUOTE
*** Condtions
#+BEGIN_SRC sh
---
- name: Install NGINX
  hosts: all
  tasks:
  - name: Install NGINX on Debian
      apt:
        name: nginx
        state: present
      when: ansible_os_family == “Debian” and
            ansible_distribution_version == “16.04”
 - name: Install NGINX on Redhat
     yum:
       name: nginx
       state: present
     when: ansible_os_family == “RedHat” or
           ansible_os_family == "SUSE"
#+END_SRC
*** Condtionals in Loop
*** Condtionals & Register
*** Roles
Ansible: assigne a role to server or host : like (mysql, gameserver: nginx,)
The same work can be done by palybook why we use role ?

This are task which are comman used by all dev, or with in organiziatoin.,,,etc
*** Find Roles
ansible-galaxy :web UI
$ansible-galaxy search mysql
*** Use Roles
#+BEGIN_SRC sh
ansible-glaxy install geerlingguy.msql
#+END_SRC
*** List Roles
#+BEGIN_SRC sh
ansible-galaxy init mysql # 
# How to use mysql in my playbook 
# move role to comman dir where ansible can find the location (/etc/ansible/roles)



#+END_SRC
*** Playbook Java installation:
**** varibale
 SOURCE: https://gist.github.com/andershedstrom/7c7d0bb5b9450c54a907
#+BEGIN_SRC sh
---
- hosts: web
  become: true
  vars:
   download_url: http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz
   dst_path: /opt/software
  tasks:
  - name: Create a directory if it does not exist
      file:
        path: "{{dst_path}}"
        state: directory
        mode: '0777'

  - name: Download JDK tar file
    command: "wget --no-check-certificate --no-cookies --header 'Cookie: oraclelicense=accept-securebackup-cookie' {{download_url}} "
    args:
      chdir: "{{dst_path}}"
  - name: Extract tar file
    command: "tar -xvzf jdk-8u131-linux-x64.tar.gz;rm -rf jdk-8u131-linux-x64.tar.gz"
  - name: Set JAVA PATH
      shell: echo "# JAVA ENVIRONmENT VARIABLES" >> ~/.bash_profile; echo "export JAVA_HOME=/opt/softwares/jdk1.8.0_131">> ~/.bash_profile; echo "export PATH=\$PATH:/opt/softwares/jdk1.8.0_131/bin">> ~/.bash_profile

  - name: restart bash and check version
      shell:   - name: Set JAVA PATH
      shell: source ~/.bash_profile; java -version
#+END_SRC

*** Patter 
#+BEGIN_SRC sh
- 
 name: Play1
 hosts : localhost, # Host*, *.company.com # Host1,Host2,Host3,
 tasks:
 - name: Copy file with owner and permissions
   copy:
     src: /srv/myfiles/foo.conf
     dest: /etc/foo.conf
 - name: Copy a new "sudoers" file into place, after passing validation with visudo
  copy:
    src: /mine/sudoers
    dest: /etc/sudoers

#+END_SRC
*** Dynamic Inventory:
#+BEGIN_SRC sh
ansible-playbook -i inventory.txt palybook.yml #static inventory
ansible-playbook -i inventory.py playbook.yml # dynamic inventory
#+END_SRC
*** Custom modules:
https://docs.ansible.com/ansible/2.3/dev_guide/developing_modules_general.html
*** Jinja Template : 
Insted of copy we use Jinja template which move the only contant of file
#+BEGIN_SRC sh
---
- hosts: azure
  become: true
  vars:
    src_path: /opt/devops.j2
    dst_path: /var/www/html/index.html
  tasks:
  - name: install httpd
    yum:
      name: httpd
      state: latest
  - name: start serveice
    service:
       name: httpd
       state: started
  - name: copy module
    template:
     src: "{{ src_path }}"
     dest: "{{ dst_path }}"
    notify:
    - restart apache
  handlers:
    - name: restart apache
      service:
       name: httpd
       state: restarted
#+END_SRC

#+BEGIN_SRC html
  <html>
  <header><title>This is title</title></header>
  <body>
  Hello CARONA world CUP 2020 fwefwefgwe
  gwrgrgrgrgrgrgrg
  rgr
  greg
  reg
  rger
  grg
  </body>
  </html>

#+END_SRC
*** Satish Anna Lectures
#+BEGIN_SRC sh
--- 
- 
  become: true
  hosts: azure
  tasks: 
    - 
      name: "install httpd"
      yum: 
        name: httpd
        state: latest
    - 
      name: "start serveice"
      service: 
        name: httpd
        state: started
    - 
      file: 
        mode: "0777"
        path: /var/www
        state: directory
      name: "Create a directory if it does not exist"
    - 
      copy: 
        dest: /var/www/html/index.html
        src: /opt/scripts/index.html
      name: "copy module"
    - 
      name: "restart serveice"
      service: 
        name: httpd
        state: resarted
# ansible-playbook ansible_pb1.yml --syntax-check
#+END_SRC

#+BEGIN_SRC sh
  - name: copy module
    copy:
     src: /opt/index.html
     dest: /var/www/html/index.html
    notify:
    - restart apache
  handlers:
    - name: restart apache
      service:
       name: httpd
       state: restarted
#+END_SRC
* Ansible(Advance) 
*** Role

*** Asynchronous Actions
**** Why Asynchronous
Time when we need to execute a long task that excceds the ssh-time out
Insted of extending we  make a check on it later time

To run mulitpule processes at once and check on it later

To run  one or more process and not check it staus
#+BEGIN_SRC sh
- name: Deploy Web Application
  hosts: web
  tasks:
  - command: /opt/monitor_webapp.py
    async: 360 # How long to run ? 
    poll: 60   # How frequently to check default 10 sec?
    register: webapp_result
               # poll: 0 , Not waiting check and go to other task


  - command: /opt/monitor_database.py
    async: 360 # How long to run ? 
    poll: 60   # How frequently to check default 10 sec?
    register: database_result
               # poll: 0 , Not waiting check and go to other task

  - name: Check status of tasks
    async_status: jid={{webapp_result.ansible_job_id}}
    register: job_result.finished
    retries: 30

# Not all module support async
#+END_SRC
*** Strategy
How playbook is executed in ansible
#+BEGIN_SRC sh
-
 name: Deploy Web Applications
 strategy: free
# Batch 
# serial:3(linear for 1st 3 server) later are free strategy
 hosts: server1
 tasks:
  - name: Install dependencies
     ########################
  - name: Install mySQL databases
     ########################
  - name: Start mysql service
     ########################
  - name: Install Python Flask dependencies
     ########################
  - name: Run web-server 
     ########################
#+END_SRC
*** Forks
How many server can it talk to at a time ?
If we have 100 servers ? will servers run at atime ?
How many servers will ansible take at atime ?

Ansible uses parallel process called frok  communicate with host 
default ansible talk 5 servers at atime.
*** Error Handling
In strategy topic we see linear, free, batch

If one server there is error <like  mysql server> then ansible take error out of list and continue the playbook

If we want to stop execution if there is an error in execution use *any_errors_fatal*
**** ignore_errors: 
consider we want to send a mail at end of task telling <Web Server Deployed>
How ever stmp server is not stable so we don't want to give error because of it and stop, FOR this kind of thinks we want to ignore the error
#+BEGIN_SRC sh
- mail:
    to: devops@corp.com
    subject: Server Deployed!
    body: Web Server Deployed
  ignore_errors: yes
#+END_SRC
**** failed_when:
We want to check the *Error log* and see if there is an error in it or not then we want to fail the if error as occured
#+BEGIN_SRC sh
- command: cat /var/log/server.log
  register: command_output
  failed_when: " 'ERROR' in command_output.stdout"
#+END_SRC

*** Jinja 2 Templating(Filters)
What is Templating : process of dynamic content :
#+BEGIN_SRC yml
- 
 name: Test Template Playbook
 hosts: localhost
 vars:
   my_name: karthik
 tasks:
  - debug:
       msg: "my name is {{my_name}}"

#+END_SRC

**** String manipualtion
#+BEGIN_QUOTE
The name is {{my_name}}=> The name is karthik
The name is {{my_name | upper}}=> The name is KARTHIK
The name is {{my_name | lower}}=> The name is karthik
The name is {{my_name | title}}=> The name is Karthik
The name is {{my_name | repalce("karthik","Sai Teja")}}=> The name is Sai Teja
The name is {{my_name | default("James")}} {{my_name}}=> The name is James Karthik
#+END_QUOTE
**** List and Set based filter
#+BEGIN_SRC yml
{{ [1,2,3] | min }}                >> 1
{{ [1,2,3] | max }}                >> 3
{{ [1,2,3,2] |unique }}                >> 1,2,3
{{ [1,2,3,4] |union([4,5])}}                >> 1,2,3,4,5
{{ [1,2,3,4] | interset([4,5]}}                >> 4
{{ 100 | random }}                >> Random number
{{ ["The", "name", "is","Bond"] | join (" ")}}                >> The name is Bond
#+END_SRC
**** File based Filter
#+BEGIN_SRC yml
{{ "/etc/hosts" | basename}}            >> hosts
{{"c"\windows\hosts" | win_basedname }}            >> hosts
{{ "c:\windows\hosts" | win_splitdrive }}            >> ["C:","\windows\hosts"]
{{ "c:\windows\hosts" | win_splitdrive| first }}            >> "C:"
{{ "c:\windows\hosts" | win_splitdrive| last }}            >> "\windows\hosts"

#+END_SRC
**** more Info about Jinja2 Filters 
GOogle Search: jinja2 List of Builtin Filters
*** Lookups
If we store hosts and password in csv file we can read the password we can use lookup plugin
#+BEGIN_SRC sh
#$ cat credentials.csv
#Hostname, Password
#Target1, PasswOrd1
#Target2, PasswOrd2


{{lockup('csvfile', 'target1 file=/tmp/credentials.csv delimiter=,')}} >> PasswOrd1
#+END_SRC

There are other type of Lookups like INI,DNS,mongodb
Source : Web : Ansible Documentation > Playbooks:Special Topic > Lookups 
*** Vault
We are storing password in host or inventory file 
Ansible vault help to encript the host or inventory file
#+BEGIN_SRC sh
# To encrypth inventory file
ansible-vault encrypt inventory.txt
# $ask for password


# run encrypted inventory file
ansible-playbook test.yml -i inventory.txt -ask-vault-pass

# pass file(vault_pass) containing password
ansible-playbook test.yml -i inventory.txt -valt-password-file ~./vault_pass

# pass script(vault_pass.py) containing password
ansible-playbook test.yml -i inventory.txt -valt-password-file ~./vault_pass.py

# view contant of encrpyted file 
ansible-vault view inventory.txt

# To create an encrypted file 
ansible-vault create inventory.txt

#+END_SRC
*** Dynamic Inventory

#+BEGIN_SRC python
#!/usr/bin/env python

import json

def get_inventory_data():
    return {
        'databases': {
            'hosts': [ip_address],
            'vars': {
               "ansible_ssh_pass":"PasswOrd",
               "ansible_ssh_host":"192.168.1.1"
            }
        }
        'web': {
            'hosts': ["web_servers"],
             'vars' : {
               "ansible_ssh_pass":"PasswOrd2",
               "ansible_ssh_host":"192.168.1.2"  
                }
            }
        }
    
if __name__ == '__main__':
    inventory_data = get_inventory_data()
    print(json.dumps(inventory_data))

#+END_SRC
*** Custom modules

*** Plugins

** Example
#+BEGIN_SRC sh
---
- name: Play 1
  hosts: test
  become: yes
  tasks:
      - name: Installing the git package
      - yum: name=git state=present

2))
---
---
- hosts: all
  become: yes
  tasks:
      - name: copying the files from server to client
      - copy: src=/etc/passwd dest=/opt

3))
----
---
- hosts: all
  become: yes
  tasks:
      - name: Installing multiple packages
      - yum: state=present name={{ item }}
   with_items:
- git
- wget
- httpd
- tar
- vim
4))

---
- hosts: all
become: yes
tasks:
- name: Installing jenkins
yum:
name: /opt/jenkins-2.129-1.1.noarch.rpm
state: present
- service:
name=jenkins state=started

5))
----
---
- hosts: all
become: yes
tasks:
- name: Sample playbooks
yum: name=httpd state=present
- name: starting httpd services
service: name=httpd state=started




- hosts: appserver

remote_user: ansible1

become: true

tasks:
- name: Install Apache Webserver
yum: pkg=httpd state=latest
- name: restart apache
service: name=httpd state=restarted

#+END_SRC
* TODO Docker
** Onframe and Cloud
Private Data Center : 
Cons: If you want a server (assign diskpace, dependencecy, users creation, check network) minimum 3-4 days

Simillary to lanch a server we may need 3-4 days

Suddenly user as increased ? How can we increase the user in short time ?
Example: irctc 10-12 am tatkal ticket(AC and SC)
Q) How increse servers dynamically based on online-users ?
A) Containerizaztion

In docker any software is called a image based on one image we can create many servers

Onframe uses a Virtual machine,Vm-ware,Oracle virtual machine

Pro:
protable(Docker hub)
scalable
** Installation Docker and cmds
Install docker
#+BEGIN_SRC sh
yum install docker -y
# Download image from docker hub
# satish: images thetheis
# create a account dockerhub

service docker status
service docker start
service docker status

# list of images in your docker 
docker images
docker search centos
docker pull centos

docker run -it --name sathish-centos centos # creatre and run in background

#
# to show the running container
#
docker ps #or docker container ls
# CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                  NAMES
# d2bf3ff05b9b        nginx               "nginx -g 'daemon of…"   19 seconds ago       Up 17 seconds       80/tcp                 my_nginX

# docker ps -a # to show the running and stoped containers
# Enter inside container
docker exec -it d2bf3ff05b9b /bin/bash   # Enter inside the container
 
docker stop d2bf3ff05b9b # stop container
docker rm d2bf3ff05b9b # to remove the container
#+END_SRC    

Port Forwording ,Volumes....etc

* adsfa  
#+BEGIN_SRC sh
# To check images
docker images

# Create Image of centos7 or ubuntu
docker pull ubuntu
docker pull centos:7

# create/run a container
docker run -itd --name sathis-dev centos:7

# check running containers  
docker ps

# go inside container
docker exec -it <container-id> /bin/bash

# delete container
docker stop <container-id>
docker rm  <container-id>

# delete image
docker rmi centos:7
#+END_SRC
* Port Forwording
Which application has port ?
tomcat 8080
nginx
jenkins
httpd: 80
port forwding:

#+BEGIN_SRC sh
docker pull tomcat 
docker images

#+END_SRC
** Volume 
local(host) linux and container dir are synchronized

local and container are have shared space
* Docker File
#+BEGIN_SRC sh
# To delete used image 
docker system prune -a # remove  unused images,container
docker pull msql:5

# -e : password
docker run -itd --name sathish_mydb -e mYSQL_ROOT_PASSWORD=DEVOPS@12345 
# Interview : How to pass password(mysql) in docker cli

dokcer exec -it 015ffdcb /bin/bash
mysql -u root -p



#+END_SRC

* 3rd April Docker File
Docker file is look like shell but it is not
** Edit Docker File 
#+BEGIN_SRC sh
# Docker-formate not shell script
# 1
FROm debian:jessie 
FROm centos
# 2
mAINTAINER "sathish"

LABEL CEO ="apple"
LABEL DRT ="stephen"


# 3
RUN mkdir /opt/demo
RUN mkdir /opt/demo && \
    touch /opt/devops && \
    yum install git -y \
    yum update ;

RUN mkdir /opt/demo && touch /opt/devops && yum install git -y    yum update ;

RUN # INSTALL packages or unzip....etc
#  &&    make all cmd into one layer
#  &&      

# 4
WORDIR /opt
RUN mkdir aws
ADD www.tomcat.tar /opt
# 6
# COPY SRC DEST
COPY /opt/sample.war /tmp

# 7
ADD 
# 1) Copy a file from local linux to container
# 2) it download from internet 
ADD www.tomcat.tar /opt # download tocat.tar to /opt

# 8
ENV    # SET ENVIROmENT Varible 
# 
# # set environment in linux
#
#export JAVA_HOME=/usr/lib/jvm/default-java
#export M2_HOME=/opt/maven
#export MAVEN_HOME=/opt/maven
#export PATH=${M2_HOME}/bin:${PATH}
#
# SET ENVIROmENT VARIABLE IN DOCKER FILE
#
ENV JAVA_HOME /opt/java-1.8.0/java
ENV PATH /opt/java-1.8.0/java/bin
ENV NGINX_VERSIN 1.11.10-1~jessie
RUN export JAVA_HOME
RUN export PATH

# 9) 
EXPOSE 8080  # Enable port 
# 10

#CMD        
#+END_SRC
** TODO Upstream and Downstream
** master -slave :
https://www.youtube.com/watch?v=8dZKT79DUfk
copy D:\jenkins\worksape\sample\target\*.war D:\tomcat\webapps

Find tomcat installation folder
delete hello-world (Note : tomacat server is shutdown then delete)

AIm : directly paste helloworld.war or all war file using jenkins in windows(install powershell plugin )




install java,git, maven in linux aws- server

What is master -slave concepts ?
master ? where your cloud install jenkins
workspace : eg :/roor/.jenkins
            eg :D:/Workspace/jenkins/

consider master in Window and slave is aws-ec2-linux(jenkins is not install)

Aim : all master job should be done in slave (/opt/devops)

Step 1 : in slave (get ip address, key)
Step 2 : install (java, maven,git....etc) in slave
Step 3 : Create New Node(In Jenkins Node means Salve-server ) and Connect to Node to Jenkins  

*** INSTALL JAVA
#+BEGIN_SRC sh
# #####################################################
#   Java(1.8_0191,1.8_0131) installation in Linux# ####################################################
# dir to install software

sudo su-
mkdir sofwares

cd /opt/softwares


# install java- 8 (does not support higher version)
# updated for jdk 8u191
#wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3a%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;" "https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz"

# updated for jdk 8u131
wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz"

# extract tar file
tar -xvzf jdk-8u131-linux-x64.tar.gz
rm -rf jdk-8u131-linux-x64.tar.gz

 # install java file # /software/jdk1.8.0_131
 vi ~/.bash_profile

# insert below text
# JAVA ENVIRONmENT VARIABLES
export JAVA_HOME=/opt/softwares/jdk1.8.0_131
export PATH=$PATH:/opt/softwares/jdk1.8.0_131/bin

# run bash
source ~/.bash_profile
java -version
#+END_SRC

*** INSTALL GIT AND maven
#+BEGIN_SRC sh
yum install git -y
#+END_SRC

*** INSTALL maven
#+BEGIN_SRC sh
cd /opt/softwares/

wget https://www-us.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz

vi ~/.bash_profile
#insert 
export M2_HOME=/opt/softwares/apache-maven-3.6.3
export PATH=$PATH:/opt/softwares/apache-maven-3.6.3/bin

# run bash_profile
source ~/.profile

mvn -version
#+END_SRC

*** Create and Connect Node(Slave-servet) to Jenkins(master- server)
Jenkins > manage Jenkins > mange Node(Slave) > New Node > 
> Node name : <Slave-Server Name>
> Permanaent Agent : enable
Fill Form 
Name, 
executors : 1
remote root directory : /opt/deploy/ # dir in slave server
label : orange
Launch method : Launch agents via SSH
   - Host Name : 18.188.173.210       
,  - Credentials : Jenkins
       - Kind : SSH Username with private key
       - Usernaem: ec2-user
       - Private key : enable
       - key : copy the key
Host Key Verification Strategy : Non verification Strategy

Node Progeries :

Toot Locations :
  - Name :  Java
  - Home : /opt/software/jdk1.8.0_131
  - Name : maven
  - Home : /opt/software/apache-maven-3.6.3/

BUG : if java, maven are not present then 
Jenkins > mangae Jenkins > Global Tool Configuratoin > JDK (Add JDK) , maver(Add maven)
manage jenkins > mange nodes
 
#+BEGIN_SRC sh
# install powershell
#+END_SRC

run as admin
start jenkins
** TODO Backup and Restoring point  
** Build Trigger
** Shell/Powershell  Scripts 

* TODO Continuous Deployment
* TODO Ansible :
*** Why Ansible:
Provisioning
Configuration management
Continous Delivery
Application Deployment
Security Compliance
Simple
Powerful
Agentless

*** SSH-Key connection between master and all slave 
**** Prerequirement-I : Create a common user with root privillage and ssh-key base authentication

- Step to connect using SSH-Key:  
 - Create common user for all users (master and slave))
 - Give root privilege to common-user for both master and slave
 - Enable ssh-key based authentication( and restart sshd server)
#+BEGIN_SRC sh
#!/bin/bash
USER_NAME='ansible'    # $1
PASSWORD='karthik@123'   #$USER_NAME

##################################################################################
#   Create a common user 
##################################################################################
useradd ${USER_NAME}
echo ${PASSWORD} | passwd --stdin ${USER_NAME}
passwd -e ${USER_NAME}

if [[ "${?}" -ne 0 ]]   # # if [ "#?" !=0]
then
  echo "Password create sucessfull"
else
      exit 1
fi
#check if user is created or not 
# cat/etc/passwd
##################################################################################
# Give root privilege
##################################################################################
if grep -q "${USER_NAME}" "/etc/sudoers"    #[[ "${?}" -ne 0 ]]
then
  echo "Alread exiting "
else
  echo "Need to add to sudoers"
  echo -e "## Allow ${USER_NAME} to run any commands anywhere\n${USER_NAME}\tALL=(ALL)\tNOPASSWD: ALL" >> /etc/sudoers
  # sed -i 's/root    ALL=(ALL)       ALL/root    ALL=(ALL)       ALL \n${USER_NAME}\tALL=(ALL)/g' /etc/sudoers
fi
grep "$USER_NAME" "/etc/sudoers"
##################################################################################
# Enable ssh-key based authentication
##################################################################################
sed -i 's/^PasswordAuthentication no/#PasswordAuthentication no/' /etc/ssh/sshd_config
sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
grep 'PasswordAuthentication' /etc/ssh/sshd_config
service sshd restart
#+END_SRC

**** Prerequirement-II: Generate ssh-key in master and share it with all slave  

 - Create ssh-key in master 
#+BEGIN_SRC sh
ssh-keygen   #check key "id_ras.pub" ls -latr /home/ansible/.ssh
ssh-copy-id devops@slave_ip
#+END_SRC

 - check ssh without password
#+BEGIN_SRC sh
ssh <user-name>@ip
# show-key : cat /home/<user-name>/devops/.ssh/authorizzed_keys
exit() # to exist 
#NOTE: we can connect from master to slave but not from slave to master
#+END_SRC

*** Using Virtual machine
*** Installation

#+BEGIN_SRC sh
wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
rpm -ivh epel-release-latest-7.noarch.rpm
yum repolist
#yum install epel-release
yum update
yum install git python openssl ansible -y
ansible --version

#+END_SRC
*** Introduction
*** Inventory: list of servers or host grouped together
PROS: 
Agent-less (No installation in slave host)

#+BEGIN_SRC sh
# Sample inventory files
web ansible_host=server1.company.com
db ansible_host=server2.company.com
mail ansible_host=server3.company.com
web2 ansible_host=server4.company.com

# #Inventory Parameters
# ansible_connection - ssh/winrm/localhost
# ansible_port -  22/5986
# ansible_user - root/administrator
# ansible_ssh_pass - Password

#
web ansible_host=server1.company.com ansible_connection=ssh
db ansible_host=server2.company.com ansible_ssh_pass=osboxes.org
mail ansible_host=server3.company.com ansible_ssh_pass=osboxes.org
web2 ansible_host=server4.company.com ansible_connection=ssh

#
#Ex:

localhost ansible_connection=localhost
#+END_SRC
**** Example
#+BEGIN_SRC sh
# /etc/ansible/host           # contain all information slave host in yaml file

#eg: Ansible has inventory files where host info are stored and used.
# inventory = /etc/ansible/host
#vi /etc/ansible/hosts   # System given examples

#[web]
# 192.147.58.9
#[app]
# 192.147.59.7
#[dbserevr]
# 192.34.5.6
# using host file we create cluster in order to run cmd on cluster we 

# Enable /etc/ansible/host by un-commenting <inventory> in ansible.cfg file
#vi /etc/ansible/ansible.cfg
#inventory = /etc/ansible/hosts

#+END_SRC
*** Ad-hoc commands
You could execute a quick one-liner cmd in ansible with-out writing playbook
#+BEGIN_SRC sh
ansible [groupname] -a "command"      # a : attributes

# Ex:
ansible test -a "ls -l /opt"
ansible test -a "cat /etc/passwd"
ansible servername -a "touch /opt/test123" -s
ansible servername -a "ls -l /opt"
ansible all -a "yum remove httpd -y" -s
ansible test -s -a "useradd batch31"
ansible all -a "ls -l /opt"

#+END_SRC

#+BEGIN_SRC sh










ansible-doc -l | wc
ansible-doc -s module-name

#+END_SRC
**** modules : Adhoc cmd are converted in module for simple and easy use
There different types of module  [[https://docs.ansible.com/ansible/latest/user_guide/modules_intro.html][Introduction to module]]

Modules (also referred to as “task plugins” or “library plugins”) are discrete units of code that can be used from the command line or in a playbook task. Ansible executes each module, usually on the remote target node, and collects return values.
#+BEGIN_SRC sh
# 
ansible [pattern] -m [module-name] -a "[module-option]"
# pattern : group or cluster in inventory file

# -a      : attributes of module
# -m      : module
# $ansible-doc -l |wc
#$ ansible-doc yum
#$ ansible-doc yum 
# Example: # state=latest or present, absent(remove install)
# ansible 
ansible web -m yum -a "name=httpd state=latest"# ################################
#                yml file
# ##############################
- name: install latest version of Apache
  yum:
    name: httpd
    state: latest

#############################################
#$ ansible-doc service   
# Example: state : started, stopped,restarted
ansible web -m service -a "name=httpd state=started" --become # install apache server

#                yml file
- name: start service hhtpd
  service:
    name: httpd
    state: started
##################################

ansible web -a "service httpd status" --become 
ansible web -m yum -a "name=httpd state=stopped" --become
#
ansible web -m yum -a "name=httpd state=absent"# uninstall httpd(apache)

# #############################################
#  Create users
# #############################################
# Encrpt password :https://www.radb.net/crypt_calculator 
ansible all -m user -a"name=test password=cFl0NSByhlhXc" --become
ansible all -a"cat /etc/passwd" --become # check user is created

# #########################################
#  Custom inventory file
##########################################
#path of inventory file path: /opt/hosts
ansible -i /opt/hosts app -a "ls -latr /opt"
ansible -i /opt/hosts app -a "ping"
ansible -i /opt/host -m yum -a "name=git state=latest"#
ansible -i /opt/host -m yum -a "name=tomcat state=latest"#
#+END_SRC
***** Example
#+BEGIN_SRC sh
ansible webserver -m yum -a "name=git state=latest"

ansible all -m yum -a "name=httpd state=latest"

ansible test -m ping

ansible all -m copy -a "src=/opt/docker-compose.yaml dest=/opt" -s

ansible appserver -m yum -s -a "name=httpd state=present"

ansible all -m yum -s -a "name=httpd state=absent"

ansible all -m yum -s -a "name=git state=latest"

ansible test -m user -s -a "name=batch31"

ansible test -m user -s -a "name=batch31 state=absent"

ansible all -m service -s -a "name=httpd state=started"


#+END_SRC
**** Playbook(.yaml)
module: to run single tast or one time task

To run multiple task , run repeted task

https://www.softwaretestinghelp.com/ansible-playbooks-ansible-vaults/

to get yaml formate example:
yml consist of ( hosts,variable,tasks) and task is array 

variable: optional 
task contain : module and attributes informations

#+BEGIN_SRC sh
ansible-doc git
#+END_SRC

***** Command type playbook
#+BEGIN_SRC sh
#cat sample.yml
##################################
---
- hosts: app
  become: true
  tasks:
  - name: install python
    yum:
      name: python
      state: latest
##########################################
ansible-playbook sample.yml --syntax-check
ansible-playbook sample.yml --list-hosts
ansible-playbook sample.yml # to run yml file


#cat useradd.yml
##################################
---
- hosts: app
  become: true
  tasks:
  - name: creating user
    yum:
      name: statish
      state: /pL2AYR6csdTI
ansible-playbook useradd.yml --syntax-check
ansible-playbook useradd.yml 
ansible app -a "cat /etc/passwrd" --become
##########################################
#cat httpd_installNrun.yml
##################################
---
- hosts: app
  become: true
  tasks:
  - name: install httpd
     yum:
       name: httpd
       state: latest
  - name:start service
     service:
        name: httpd
        state: started
ansible-playbook httpd_installNrun.yml --syntax-check
ansible-playbook httpd_installNrun.yml
##########################################
#cat create_file.yml
##################################
---
- hosts: app
  tasks:
  - name: create file
     file:
      path: /opt/vbs
       state: touch
ansible-playbook create_file.yml --syntax-check
ansible-playbook create_file.yml

#+END_SRC

*** modules
- modules
  - System (User, Group, Hostname, Iptables, Lvg, Lvol, make, mount,ping, Timezone, Systemd, Service)
  - Commands (Command, Expect , RAW, Script, Shell)
  - Files (Acl, Archive, File, Find, Lineinfile, Replace, Stat, Template, Unarchive)
  - Database(mongodb,mssql,mysql, Postgresql, Proxysql, vertica)
  - Cloud (Amazon, Atomic, Azure, Centrylink,Cloudscale,Cloudstack,Digital Ocean, Docker,Google, Linode, Openstack, Rackspace, Smartos, Softlayer, Vmware)
  - Windows (In windows environment)
  - git ()
  - .....
  - 
  - shell
  - command
  - script
#+BEGIN_SRC sh
-
 name: Play 1
 hosts: localhost
 tasks:
 - name: Execute command ‘date’
   command: date

 - name: Display resolv.conf contents
   command: cat /etc/resolv.conf

 - name: Display resolv.conf contents
   command: cat resolv.conf chdir=/etc

 - name: Display resolv.conf contents
   command: mkdir /folder creates=/folder

 - name: Copy file from source to destination
   copy: src=/source_file dest=/destination

 - name: Run a script on remote server
   script: /some/local/script.sh -arg1 -arg2
# Services : Started,Stopped,Resatared
 - name: Start the database service
   service: name=postgresql state=started

 - name: Start the httpd service
   service: name=httpd state=started

 - name: Start the nginx service
   service:
     name: nginx
     state: started
 - name: Start the database service
   service:
     name: postgresql
     state: started
# Lineinfile
# Search for a line in a file and replace it or add it if it doesn’t exist.
- lineinfile:
    path: /etc/resolv.conf
    line: 'nameserver 10.1.250.10'
# Ping
  - name: Ping test
    ping:

#+END_SRC
*** Playbook for file-module 
Basic yml to be remember during interviews
https://www.softwaretestinghelp.com/ansible-playbooks-ansible-vaults/

#+BEGIN_SRC sh
# $ansible-doc file # go to example

- name: Create a directory if it does not exist
  file:
    path: /etc/some_directory
    state: directory
    mode: '0755'


- name: Remove file (delete file)
  file:
    path: /etc/foo.txt
    state: absent

- name: Recursively remove directory
  file:
    path: /etc/foo
    state: absent


- name: Change file ownership, group and permissions
  file:
    path: /etc/foo.conf
    owner: foo
    group: foo
    mode: '0644'

- name: Change file ownership, group and permissions
  file:
    path: /etc/foo.conf
    owner: foo
    group: foo
    mode: '0644'

- name: Change file ownership, group and permissions
  file:
    path: /etc/foo.conf
    owner: foo
    group: foo
    mode: '0644'

#+END_SRC

#+BEGIN_SRC sh
cd /opt
#vi dry.yml
---
- hosts: web
  become: true
  task:
  - name: create dir
    file:
      path: /opt/test_dir
      state: directory
      mode: '0755'
  - name: change permission and ownership
    file:
      path: /opt/test_dir
      owner: ansible
      group: ansible
      mode: '0777'
  - name: create touch
    file:
      path: /opt/test.txt
      state: touch
      mode: '0755'
  - name: create multiple touch
    file:
      path: "{{item}}"
      state: touch
      mode: '0755'
    with_item:
      - "/opt/satishP"
      - "/opt/satishT"
      - "/opt/rajit"
      - "/opt/karthik"

  - name: Remove file (delete file)
    file:
      path: /opt/test.txt
      state: absent
  - name: Recursively remove directory
    file:
      path: /opt/etc/foo
      state: absent
    
...
#+END_SRC
*** Palybook service (state: reloaded, restarted, started, stopped)
#+BEGIN_SRC sh
 - name: start serveice
   service:
      name: httpd
      state: started # reloaded, restarted, started, stopped

#+END_SRC
*** Palybook copy-module
#+BEGIN_SRC sh
#$ansible-doc copy
- name: Copy file with owner and permissions
  copy:
    src: /srv/myfiles/foo.conf
    dest: /etc/foo.conf
- name: Copy a new "sudoers" file into place, after passing validation with visudo
  copy:
    src: /mine/sudoers
    dest: /etc/sudoers
    validate: /usr/sbin/visudo -csf %s

#+END_SRC

#+BEGIN_SRC sh
cd /opt
#vi copy_pb.yml
---
- hosts: web
  task:
  - name: copy file
    copy:
      src: /opt/sbi.war
      dest: /tmp/sbi.war
...
# #########################333
#   Using SRC
# #########################3
- hosts: web
  become:true
  vars:
    dst_path: /opt
    src_path: /opt/icici.war
  task:
  - name: copy file
    copy:
      src: "{{src_path}}"
      dest: "{{dst_path}}"
...
#+END_SRC
*** Varaible
#+BEGIN_SRC sh
-
 name: Add DNS server to resolv.conf
 hosts: localhost
 vars:
   dns_server: 10.1.250.10
 tasks:
 - lineinfile:
     path: /etc/resolv.conf
     line: 'nameserver {{dns_server }}’
#+END_SRC

#+BEGIN_SRC sh
- 
  name: Set Firewall Configurations
  hosts: web
  var:
    http_port: 8081
    snmp_port: 161-162
    inter_ip_range: 192.0.2.0
  tasks:
  - firewalld:
      service: https
      permanent: true
      state: enabled

  - firewalld:
      port: ‘{{ http_port }}’/tcp
      permanent: true
      state: disabled
  - firewalld:
      port: ‘{{snmp_port}}’/udp
      permanent: true
      state: disabled
  - firewalld: 
      source: ‘{{ inter_ip_range}}’/24
      Zone: internal
      state: enabled
#+END_SRC
*** Looping
#+BEGIN_SRC sh
-
  name: Create users
  hosts: localhost
  tasks:
  - user: name= ‘{{ item }}’
    loop:
      - joe
      - george
      - ravi
      - mani
      - kiran
      - jazlan
      - emaan
      - mazin
      - izaan
      - mike
      - menaal
      - shoeb
      - rani
#+END_SRC

#+BEGIN_SRC sh
- 
  name: Create users
  hosts: localhost
  tasks:
  - user: 
      name= ‘{{item.name}}’  
      state= present
      uid= '{{ item.uid}}’

    loop:
     - name: joe
       uid: 1010
     - name: george
       uid: 1010 
     - name :ravi
       uid: 1012
     - name:mani
       uid: 1013
     - name:kiran
       uid: 1014
     - name:jazlan
       uid: 1015
     - name:emaan
       uid: 1016
     - name:mazin
       uid: 1017
     - name:izaan 
     - name:kiran
       uid: 1018
     - name:mike 
#+END_SRC
**** With_item
#+BEGIN_SRC sh
- name: Create users 
  hosts: localhost 
  task: 
  - user: name='{{ item }}'
    state: present 
    with_item: 
    - joe 
    - george 
    - ravi 
    - mani
#+END_SRC


**** With_file
#+BEGIN_SRC sh
- name: Create users 
  hosts: localhost 
  task: 
  - debug: var=item
    with_file: 
    - "/etc/hosts"
    - "/etc/resolve.conf"
    - "/etc/ntp.conf"
#+END_SRC
**** With url
#+BEGIN_SRC sh
- name: get multiple urls
  hosts: localhost 
  task: 
  - debug: var=item
    with_url: 
    - "https://site1.com/get-servers"
    - "https://site2.com/get-servers"
    - "https://site3.com/get-servers"
    - "https://site4.com/get-servers"
#+END_SRC
**** With mongodb:
#+BEGIN_SRC sh
- name: get multiple mongodbs
  hosts: localhost 
  task: 
  - debug: msg "DB={{item.database}} PID={{item.pid}}"
    with_url: 
    - database: dev
      connection_string : "mongodb://dev.mongo/"
    - database: dev
      connection_string : "mongodb://prod.mongo/"

#+END_SRC
**** With_*
#+BEGIN_QUOTE
with_items
with_file
with_url
with_mongodb
with_dict
with_etcd
with_env
with_filetree
With_ini
With_inventory_hostnames
With_k8s
With_manifold
With_nested
With_nios
With_openshift
With_password
With_pipe
With_rabbitmq
With_redis
With_sequence
With_skydive
With_subelements
With_template
With_together
With_varnames
#+END_QUOTE
*** Condtions
#+BEGIN_SRC sh
---
- name: Install NGINX
  hosts: all
  tasks:
  - name: Install NGINX on Debian
      apt:
        name: nginx
        state: present
      when: ansible_os_family == “Debian” and
            ansible_distribution_version == “16.04”
 - name: Install NGINX on Redhat
     yum:
       name: nginx
       state: present
     when: ansible_os_family == “RedHat” or
           ansible_os_family == "SUSE"
#+END_SRC
*** Condtionals in Loop
*** Condtionals & Register
*** Roles
Ansible: assigne a role to server or host : like (mysql, gameserver: nginx,)
The same work can be done by palybook why we use role ?

This are task which are comman used by all dev, or with in organiziatoin.,,,etc
*** Find Roles
ansible-galaxy :web UI
$ansible-galaxy search mysql
*** Use Roles
#+BEGIN_SRC sh
ansible-glaxy install geerlingguy.msql
#+END_SRC
*** List Roles
#+BEGIN_SRC sh
ansible-galaxy init mysql # 
# How to use mysql in my playbook 
# move role to comman dir where ansible can find the location (/etc/ansible/roles)



#+END_SRC
*** Playbook Java installation:
**** varibale
 SOURCE: https://gist.github.com/andershedstrom/7c7d0bb5b9450c54a907
#+BEGIN_SRC sh
---
- hosts: web
  become: true
  vars:
   download_url: http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz
   dst_path: /opt/software
  tasks:
  - name: Create a directory if it does not exist
      file:
        path: "{{dst_path}}"
        state: directory
        mode: '0777'

  - name: Download JDK tar file
    command: "wget --no-check-certificate --no-cookies --header 'Cookie: oraclelicense=accept-securebackup-cookie' {{download_url}} "
    args:
      chdir: "{{dst_path}}"
  - name: Extract tar file
    command: "tar -xvzf jdk-8u131-linux-x64.tar.gz;rm -rf jdk-8u131-linux-x64.tar.gz"
  - name: Set JAVA PATH
      shell: echo "# JAVA ENVIRONmENT VARIABLES" >> ~/.bash_profile; echo "export JAVA_HOME=/opt/softwares/jdk1.8.0_131">> ~/.bash_profile; echo "export PATH=\$PATH:/opt/softwares/jdk1.8.0_131/bin">> ~/.bash_profile

  - name: restart bash and check version
      shell:   - name: Set JAVA PATH
      shell: source ~/.bash_profile; java -version
#+END_SRC

*** Patter 
#+BEGIN_SRC sh
- 
 name: Play1
 hosts : localhost, # Host*, *.company.com # Host1,Host2,Host3,
 tasks:
 - name: Copy file with owner and permissions
   copy:
     src: /srv/myfiles/foo.conf
     dest: /etc/foo.conf
 - name: Copy a new "sudoers" file into place, after passing validation with visudo
  copy:
    src: /mine/sudoers
    dest: /etc/sudoers

#+END_SRC
*** Dynamic Inventory:
#+BEGIN_SRC sh
ansible-playbook -i inventory.txt palybook.yml #static inventory
ansible-playbook -i inventory.py playbook.yml # dynamic inventory
#+END_SRC
*** Custom modules:
https://docs.ansible.com/ansible/2.3/dev_guide/developing_modules_general.html
*** Jinja Template : 
Insted of copy we use Jinja template which move the only contant of file
#+BEGIN_SRC sh
---
- hosts: azure
  become: true
  vars:
    src_path: /opt/devops.j2
    dst_path: /var/www/html/index.html
  tasks:
  - name: install httpd
    yum:
      name: httpd
      state: latest
  - name: start serveice
    service:
       name: httpd
       state: started
  - name: copy module
    template:
     src: "{{ src_path }}"
     dest: "{{ dst_path }}"
    notify:
    - restart apache
  handlers:
    - name: restart apache
      service:
       name: httpd
       state: restarted
#+END_SRC

#+BEGIN_SRC html
  <html>
  <header><title>This is title</title></header>
  <body>
  Hello CARONA world CUP 2020 fwefwefgwe
  gwrgrgrgrgrgrgrg
  rgr
  greg
  reg
  rger
  grg
  </body>
  </html>

#+END_SRC
*** Satish Anna Lectures
#+BEGIN_SRC sh
--- 
- 
  become: true
  hosts: azure
  tasks: 
    - 
      name: "install httpd"
      yum: 
        name: httpd
        state: latest
    - 
      name: "start serveice"
      service: 
        name: httpd
        state: started
    - 
      file: 
        mode: "0777"
        path: /var/www
        state: directory
      name: "Create a directory if it does not exist"
    - 
      copy: 
        dest: /var/www/html/index.html
        src: /opt/scripts/index.html
      name: "copy module"
    - 
      name: "restart serveice"
      service: 
        name: httpd
        state: resarted
# ansible-playbook ansible_pb1.yml --syntax-check
#+END_SRC

#+BEGIN_SRC sh
  - name: copy module
    copy:
     src: /opt/index.html
     dest: /var/www/html/index.html
    notify:
    - restart apache
  handlers:
    - name: restart apache
      service:
       name: httpd
       state: restarted
#+END_SRC
* Ansible(Advance) 
*** Role

*** Asynchronous Actions
**** Why Asynchronous
Time when we need to execute a long task that excceds the ssh-time out
Insted of extending we  make a check on it later time

To run mulitpule processes at once and check on it later

To run  one or more process and not check it staus
#+BEGIN_SRC sh
- name: Deploy Web Application
  hosts: web
  tasks:
  - command: /opt/monitor_webapp.py
    async: 360 # How long to run ? 
    poll: 60   # How frequently to check default 10 sec?
    register: webapp_result
               # poll: 0 , Not waiting check and go to other task


  - command: /opt/monitor_database.py
    async: 360 # How long to run ? 
    poll: 60   # How frequently to check default 10 sec?
    register: database_result
               # poll: 0 , Not waiting check and go to other task

  - name: Check status of tasks
    async_status: jid={{webapp_result.ansible_job_id}}
    register: job_result.finished
    retries: 30

# Not all module support async
#+END_SRC
*** Strategy
How playbook is executed in ansible
#+BEGIN_SRC sh
-
 name: Deploy Web Applications
 strategy: free
# Batch 
# serial:3(linear for 1st 3 server) later are free strategy
 hosts: server1
 tasks:
  - name: Install dependencies
     ########################
  - name: Install mySQL databases
     ########################
  - name: Start mysql service
     ########################
  - name: Install Python Flask dependencies
     ########################
  - name: Run web-server 
     ########################
#+END_SRC
*** Forks
How many server can it talk to at a time ?
If we have 100 servers ? will servers run at atime ?
How many servers will ansible take at atime ?

Ansible uses parallel process called frok  communicate with host 
default ansible talk 5 servers at atime.
*** Error Handling
In strategy topic we see linear, free, batch

If one server there is error <like  mysql server> then ansible take error out of list and continue the playbook

If we want to stop execution if there is an error in execution use *any_errors_fatal*
**** ignore_errors: 
consider we want to send a mail at end of task telling <Web Server Deployed>
How ever stmp server is not stable so we don't want to give error because of it and stop, FOR this kind of thinks we want to ignore the error
#+BEGIN_SRC sh
- mail:
    to: devops@corp.com
    subject: Server Deployed!
    body: Web Server Deployed
  ignore_errors: yes
#+END_SRC
**** failed_when:
We want to check the *Error log* and see if there is an error in it or not then we want to fail the if error as occured
#+BEGIN_SRC sh
- command: cat /var/log/server.log
  register: command_output
  failed_when: " 'ERROR' in command_output.stdout"
#+END_SRC

*** Jinja 2 Templating(Filters)
What is Templating : process of dynamic content :
#+BEGIN_SRC yml
- 
 name: Test Template Playbook
 hosts: localhost
 vars:
   my_name: karthik
 tasks:
  - debug:
       msg: "my name is {{my_name}}"

#+END_SRC

**** String manipualtion
#+BEGIN_QUOTE
The name is {{my_name}}=> The name is karthik
The name is {{my_name | upper}}=> The name is KARTHIK
The name is {{my_name | lower}}=> The name is karthik
The name is {{my_name | title}}=> The name is Karthik
The name is {{my_name | repalce("karthik","Sai Teja")}}=> The name is Sai Teja
The name is {{my_name | default("James")}} {{my_name}}=> The name is James Karthik
#+END_QUOTE
**** List and Set based filter
#+BEGIN_SRC yml
{{ [1,2,3] | min }}                >> 1
{{ [1,2,3] | max }}                >> 3
{{ [1,2,3,2] |unique }}                >> 1,2,3
{{ [1,2,3,4] |union([4,5])}}                >> 1,2,3,4,5
{{ [1,2,3,4] | interset([4,5]}}                >> 4
{{ 100 | random }}                >> Random number
{{ ["The", "name", "is","Bond"] | join (" ")}}                >> The name is Bond
#+END_SRC
**** File based Filter
#+BEGIN_SRC yml
{{ "/etc/hosts" | basename}}            >> hosts
{{"c"\windows\hosts" | win_basedname }}            >> hosts
{{ "c:\windows\hosts" | win_splitdrive }}            >> ["C:","\windows\hosts"]
{{ "c:\windows\hosts" | win_splitdrive| first }}            >> "C:"
{{ "c:\windows\hosts" | win_splitdrive| last }}            >> "\windows\hosts"

#+END_SRC
**** more Info about Jinja2 Filters 
GOogle Search: jinja2 List of Builtin Filters
*** Lookups
If we store hosts and password in csv file we can read the password we can use lookup plugin
#+BEGIN_SRC sh
#$ cat credentials.csv
#Hostname, Password
#Target1, PasswOrd1
#Target2, PasswOrd2


{{lockup('csvfile', 'target1 file=/tmp/credentials.csv delimiter=,')}} >> PasswOrd1
#+END_SRC

There are other type of Lookups like INI,DNS,mongodb
Source : Web : Ansible Documentation > Playbooks:Special Topic > Lookups 
*** Vault
We are storing password in host or inventory file 
Ansible vault help to encript the host or inventory file
#+BEGIN_SRC sh
# To encrypth inventory file
ansible-vault encrypt inventory.txt
# $ask for password


# run encrypted inventory file
ansible-playbook test.yml -i inventory.txt -ask-vault-pass

# pass file(vault_pass) containing password
ansible-playbook test.yml -i inventory.txt -valt-password-file ~./vault_pass

# pass script(vault_pass.py) containing password
ansible-playbook test.yml -i inventory.txt -valt-password-file ~./vault_pass.py

# view contant of encrpyted file 
ansible-vault view inventory.txt

# To create an encrypted file 
ansible-vault create inventory.txt

#+END_SRC
*** Dynamic Inventory

#+BEGIN_SRC python
#!/usr/bin/env python

import json

def get_inventory_data():
    return {
        'databases': {
            'hosts': [ip_address],
            'vars': {
               "ansible_ssh_pass":"PasswOrd",
               "ansible_ssh_host":"192.168.1.1"
            }
        }
        'web': {
            'hosts': ["web_servers"],
             'vars' : {
               "ansible_ssh_pass":"PasswOrd2",
               "ansible_ssh_host":"192.168.1.2"  
                }
            }
        }
    
if __name__ == '__main__':
    inventory_data = get_inventory_data()
    print(json.dumps(inventory_data))

#+END_SRC
*** Custom modules

*** Plugins

** Example
#+BEGIN_SRC sh
---
- name: Play 1
  hosts: test
  become: yes
  tasks:
      - name: Installing the git package
      - yum: name=git state=present

2))
---
---
- hosts: all
  become: yes
  tasks:
      - name: copying the files from server to client
      - copy: src=/etc/passwd dest=/opt

3))
----
---
- hosts: all
  become: yes
  tasks:
      - name: Installing multiple packages
      - yum: state=present name={{ item }}
   with_items:
- git
- wget
- httpd
- tar
- vim
4))

---
- hosts: all
become: yes
tasks:
- name: Installing jenkins
yum:
name: /opt/jenkins-2.129-1.1.noarch.rpm
state: present
- service:
name=jenkins state=started

5))
----
---
- hosts: all
become: yes
tasks:
- name: Sample playbooks
yum: name=httpd state=present
- name: starting httpd services
service: name=httpd state=started




- hosts: appserver

remote_user: ansible1

become: true

tasks:
- name: Install Apache Webserver
yum: pkg=httpd state=latest
- name: restart apache
service: name=httpd state=restarted

#+END_SRC
* TODO Docker
** Onframe and Cloud
Private Data Center : 
Cons: If you want a server (assign diskpace, dependencecy, users creation, check network) minimum 3-4 days

Simillary to lanch a server we may need 3-4 days

Suddenly user as increased ? How can we increase the user in short time ?
Example: irctc 10-12 am tatkal ticket(AC and SC)
Q) How increse servers dynamically based on online-users ?
A) Containerizaztion

In docker any software is called a image based on one image we can create many servers

Onframe uses a Virtual machine,Vm-ware,Oracle virtual machine

Pro:
protable(Docker hub)
scalable
** Installation Docker and cmds
Install docker
#+BEGIN_SRC sh
yum install docker -y
# Download image from docker hub
# satish: images thetheis
# create a account dockerhub

service docker status
service docker start
service docker status

# list of images in your docker 
docker images
docker search centos
docker pull centos

docker run -it --name sathish-centos centos # creatre and run in background

#
# to show the running container
#
docker ps #or docker container ls
# CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                  NAMES
# d2bf3ff05b9b        nginx               "nginx -g 'daemon of…"   19 seconds ago       Up 17 seconds       80/tcp                 my_nginX

# docker ps -a # to show the running and stoped containers
# Enter inside container
docker exec -it d2bf3ff05b9b /bin/bash   # Enter inside the container
 
docker stop d2bf3ff05b9b # stop container
docker rm d2bf3ff05b9b # to remove the container
#+END_SRC    

Port Forwording ,Volumes....etc

* adsfa  
#+BEGIN_SRC sh
# To check images
docker images

# Create Image of centos7 or ubuntu
docker pull ubuntu
docker pull centos:7

# create/run a container
docker run -itd --name sathis-dev centos:7

# check running containers  
docker ps

# go inside container
docker exec -it <container-id> /bin/bash

# delete container
docker stop <container-id>
docker rm  <container-id>

# delete image
docker rmi centos:7
#+END_SRC
* Port Forwording
Which application has port ?
tomcat 8080
nginx
jenkins
httpd: 80
port forwding:

#+BEGIN_SRC sh
docker pull tomcat 
docker images

#+END_SRC
** Volume 
local(host) linux and container dir are synchronized

local and container are have shared space
* Docker File
#+BEGIN_SRC sh
# To delete used image 
docker system prune -a # remove  unused images,container
docker pull msql:5

# -e : password
docker run -itd --name sathish_mydb -e mYSQL_ROOT_PASSWORD=DEVOPS@12345 
# Interview : How to pass password(mysql) in docker cli

dokcer exec -it 015ffdcb /bin/bash
mysql -u root -p



#+END_SRC

* 3rd April Docker File
Docker file is look like shell but it is not
** Edit Docker File 
#+BEGIN_SRC sh
# Docker-formate not shell script
# 1
FROm debian:jessie 
FROm centos
# 2
mAINTAINER "sathish"

LABEL CEO ="apple"
LABEL DRT ="stephen"


# 3
RUN mkdir /opt/demo
RUN mkdir /opt/demo && \
    touch /opt/devops && \
    yum install git -y \
    yum update ;

RUN mkdir /opt/demo && touch /opt/devops && yum install git -y    yum update ;

RUN # INSTALL packages or unzip....etc
#  &&    make all cmd into one layer
#  &&      

# 4
WORDIR /opt
RUN mkdir aws
ADD www.tomcat.tar /opt
# 6
# COPY SRC DEST
COPY /opt/sample.war /tmp

# 7
ADD 
# 1) Copy a file from local linux to container
# 2) it download from internet 
ADD www.tomcat.tar /opt # download tocat.tar to /opt

# 8
ENV    # SET ENVIROmENT Varible 
# 
# # set environment in linux
#
#export JAVA_HOME=/usr/lib/jvm/default-java
#export M2_HOME=/opt/maven
#export MAVEN_HOME=/opt/maven
#export PATH=${M2_HOME}/bin:${PATH}
#
# SET ENVIROmENT VARIABLE IN DOCKER FILE
#
ENV JAVA_HOME /opt/java-1.8.0/java
ENV PATH /opt/java-1.8.0/java/bin
ENV NGINX_VERSIN 1.11.10-1~jessie
RUN export JAVA_HOME
RUN export PATH

# 9) 
EXPOSE 8080  # Enable port 
# 10

#CMD and ENTRYPOINT



EXPOSE 80 443 # open port 80,443
Cmd # file cmd will run end or restart of container
CmD ["java","-version"]
ENTRYPOINT ["java", "-jar", "jenkins.war"]

#+END_SRC

** Run(Execute) Docekr file 
Run a docker file
#+BEGIN_SRC sh
#
#   Build the docker image by docker-file
#
docker build -t docker_file_name  # -t: tag #-f : docker file path
docker build -t sathish -f dockerfile-dev . # . : current dir

#
# start container 
#
docker run -itd sathish

# inside the container

#+END_SRC

#+BEGIN_SRC sh
# docker run -it sathish

java -jar jenkins.war

#+END_SRC
** install jenkins in Docker using (java -jar ) cmd
#+BEGIN_SRC sh
FROM centos:7
LABEL name="sathish-devopstrainer"

RUN yum -y update && \
    yum install java-1.8.0-openjdk -y;

ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.el7_7.x86_64/jre/bin/java
ENV PATH ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.el7_7.x86_64/jre/bin/java/bin:$PATH

RUN export JAVA_HOME
RUN export PATH

WORKDIR /opt
EXPOSE 8081
ADD https://updates.jenkins-ci.org/download/war/2.229/jenkins.war .
RUN java -jar jenkins.war
ENTRYPOINT ["java", "-jar", "jenkins.war"]
#cat /root/.jenkins/secrets/initalAdminPassword



#
#    Install tomcat  
#

#ADD http://apachemirror.wuchna.com/tomcat/tomcat-9/v9.0.33/bin/apache-tomcat-9.0.33.tar.gz .
#RUN tar -xvf apache-tomcat-9.0.33.tar.gz
#RUN sh /opt/apache-tomcat-9.0.33/bin/startup.sh





#+END_SRC

* 7th April Docker File [Cmd Entripoint]
Difference
- Examin
- Override
- default

-1   To execute a msg while running inside container
      CmD 'echo hai'
       or
      CMD ["ECHO" "Hai"]

      Ex:
      RUN mkdir /opt/satish
      CmD 'echo floder created'
#+BEGIN_SRC sh
docker run -it sathish-own echo directory created
docker run -it sathish-own echo sathish folder is created
#+END_SRC
-2 cmd can be OVERRIDE while entrpoint can't be override but appended

#+BEGIN_SRC sh
# FileName : dockerfile
FROM centos
RUN mkdir /opt/azuredevops
ENTRY ["echo", "floder created"]
#+END_SRC
 
#+BEGIN_SRC sh
docker run -it sathish-owm
docker run -it sathish-own  echo sathish is created # we see it is not over-ride but appended
#+END_SRC

-3 passs ${1} parameter to shell scripts inside docker-file 

#+BEGIN_SRC sh
# cat deployment.sh
env= $1
echo "$1 is working in IBM"
#+END_SRC

#+BEGIN_SRC sh
FROM centos
WORKDIR /opt
copy deployment.sh .
ENTRYPOINT ["sh","deployment.sh"]
CMD ["sathish"]   # Sathish is paramenter to ENTRYPOINT
#+END_SRC

#+BEGIN_SRC sh
docker build -t sathish-own -f dockerfile_1 .
docker run -it sathish-owm 
# sathish is working in IBM

#+END_SRC

Example 2:
#+BEGIN_SRC sh
#cat dockerfile2
FROM centos:7
LABEL name="sathish-devopstrainer"
ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.e17_7.x86_64/jre/bbin/java
RUN yum -y update &&\
    yum install java-1.8.0-openjdk -y;
RUN export JAVA_HOME
CMD ["java","-version"]
#+END_SRC

#+BEGIN_SRC sh
docker build -t sathish-own -f dockerfile2 .
docker run -it sathish-owm 
#+END_SRC


Example : 
#+BEGIN_SRC sh
#wget jenkins.war_url  #download jenkins.war file
 #cat dockerfile2
FROM centos:7
LABEL name="sathish-devopstrainer"
ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.e17_7.x86_64/jre/bbin/java
RUN yum -y update &&\
    yum install java-1.8.0-openjdk -y;
RUN export JAVA_HOME
COPY jenkins.war

CMD ["java","-version"]
#+END_SRC
Example :
#+BEGIN_SRC sh
FROM centos
ENTRYPOINT ["echo" ]
CMD [ "hello"]
#+END_SRC

#+BEGIN_SRC sh
docker run -it myown
# hello 
docker run -it myown hi 
# hi
#+END_SRC
 
Values can be override we can use combination of entrypoint(Not Overriden contain command ) and cmd(Overriden contain Value or arguments)
  
*** Example : Real time we can use sleep and wait commond.
#+BEGIN_SRC sh
cat dockerfile
#FROM centos
#CMD ["sleep","10"]

docker build -t myown .
docker build -t myown
docker build -t myown echo 20
docker build -t myown 10
#+END_SRC

#+BEGIN_SRC sh
cat dockerfile
#FROM centos
#RUN top
#ENTRYPOINT ["sleep"]
#CMD ["10"]

docker build -t myown .
docker build -t myown
# 10 seconds sys is sleep
docker build -t myown 20
# 20 seconds sys is sleep


#+END_SRC

-3 Change default process
#+BEGIN_SRC sh
docker ps -a    #by default the command is bash
#          COMMAND
#          /bin/bash
#          /bin/bash
#          /bin/bash
#+END_SRC
 
#+BEGIN_SRC sh
cat dockerfile
#FROM centos
CMD ["/bin/sh"]

docker build -t myown .
docker build -t myown
docker ps -a    #by default the command is bash
#          COMMAND
#          /bin/sh
#          /bin/bash
#          /bin/bash
#+END_SRC
* [8th April] Link N Docker-Compose


Link 
#+BEGIN_SRC sh
# To delete used image 
docker system prune -a # remove  unused images,container
docker pull msql
docker pull wordpress
docker run -itd --name mydb -e mYSQL_ROOT_PASSWORD=DEVOPS@12345 mysql:5.7
dokcer exec -it 015ffdcb /bin/bash
mysql -u root -p
#show database;
#create employ (){.......etc
docker run -itd -itd wordpress  --link mydb:mysql -p 83:80 wordpress
#+END_SRC

** Docker Compose
#+BEGIN_SRC sh
# cat docker-compose.yml
version: '3.3'

services:
db:
image: mysql:5.7
restart: always
environment:
MYSQL_ROOT_PASSWORD: dev@123

wordpress:
depends_on:
- db
image: wordpress:latest
ports:
- "8000:80"
restart: always
#+END_SRC

Build the project
#+BEGIN_SRC sh
docker-compose up -d
docker ps
#+END_SRC
* TODO Phase 5: Continuous Monitoring 
(Tools Used: Splunk, ELK Stack, Nagios, New Relic)
Nagios: is a monitoring tool

- disc space
- services 
- URL avaialbility


www.dev-facbook.com
www.sit-facebook.com
www.preprod-facebook.com
www.prod-facebook.com

master - nagios

slave - linux  NRPE 
window - slave NSclient
* Real Time Sceanior
Real time there are 5 environment
- dev env
- sit env
- uat env 
- pre production
- production


Real time : In dev env has 6 servers : shared a and shared b
sit -6
uat -9 servers (performance is also tested)
pre-production (16 -servers)
production (20-servers)

